package proyecto_compiladores1_netbeans;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Symbol;


parser code 
{:
        public static int num_erroresSintactico = 0;
        public static Nodo padre;
        public static int cont_Nodos = 0;

        public void syntax_error(Symbol s){
                num_erroresSintactico ++;
                System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }
:}
/*
 {:
        Nodo nodo = new Nodo();

        RESULT = nodo;
 :}
*/
//exprCondicional,
/*Palabras reservadas*/
terminal IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal INT, CHAR;
/*Lexemas*/
terminal String OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION, OPREL, OPLOGIC;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID,  APUNTADORVAR, APUNTADOR, DOBLEPUNTOS, SINTERROGACION;
/*Caracteres especiales*/
terminal COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE;


non terminal programa, inicioprograma, cuerpoPrograma, declaracion, especificadorTipo,operando, declaracionVar, listaIdentificadores, listaParametros, parametro,expresion, exprSimple, termino, constante, exprAsignacion,  condicion, exprRelacional, stmnt, llamadoFunc, stmntComandos, stmntCompuesto, listaBloques, itemBloque,  stmntExpresion, stmntSeleccion, stmntIteracion, stmntSalto, subprogramas, subprograma, exprIncrementos, prototipoFunc,listaPrototipos;


precedence left  ELSE;

start with programa;

//Programa
programa::= 
        listaPrototipos:lProt inicioprograma:inicProg subprogramas:subProg 
        {:
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA CON SUBPROGRAMAS");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;

        nodo.addHijos((Nodo)lProt);
        nodo.addHijos((Nodo) inicProg);
        nodo.addHijos((Nodo) subProg);

        parser.padre = nodo;
        RESULT = nodo;
        :}
        |inicioprograma:inicProg
        {:
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA SOLO MAIN");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;
        nodo.addHijos((Nodo) inicProg);

        parser.padre = nodo;
        RESULT = nodo;
        :}
        ;
   
//InicioPrograma
inicioprograma ::= INT MAIN LPAR listaParametros:lparametros RPAR IZQLLAVE cuerpoPrograma:cuerpoP DERLLAVE 
                {:
                   Nodo nodo = new Nodo();
                   nodo.setEtiqueta("MAIN");
                   nodo.setID(parser.cont_Nodos);
                   parser.cont_Nodos++;

                   nodo.addHijos((Nodo)lparametros);
                   nodo.addHijos((Nodo)cuerpoP);
                   RESULT= nodo;
                :}
                | error PUNTOCOMA
                | error DERLLAVE
                | error LPAR
                | error RPAR
                | error COMMA
                ;
//Lista Parametros
listaParametros ::= listaParametros:listaP COMMA parametro:param
                        {:
                           Nodo nodo = new Nodo();
                           nodo.setEtiqueta("LISTA DE PARAMETROS");
                           nodo.setID(parser.cont_Nodos);
                           parser.cont_Nodos++;

                           nodo.addHijos((Nodo) listaP);
                           nodo.addHijos((Nodo)param);
                           RESULT = nodo;
                        :}
                    | parametro:param
                        {:
                           RESULT = (Nodo)param;
                        :}
                    ;
//Parametro
parametro ::= 
                especificadorTipo:tipo ID:id
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("PAREMETRO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;

                        //terminal ID
                        Nodo identificador = new Nodo();
                        identificador.setEtiqueta("ID");
                        identificador.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        identificador.setValor(id);
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)identificador);
                        RESULT = nodo;
                :}
                |/*lambda*/
                {:
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                :}
                ;
//especificador Tipo
especificadorTipo ::= VOID 
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("VOID");

                        RESULT = nodo;
                    :}
                    | CHAR
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("CHAR");

                        RESULT = nodo;
                    :}
                    | INT
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("INT");

                        RESULT = nodo;
                    :}
                    | APUNTADOR:pointer
                    {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor(pointer);
                        RESULT = nodo;
                    :}
                    
                    ; 

//Cuerpo Programa
cuerpoPrograma ::=  
                declaracion:decl cuerpoPrograma:cp
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LINEA PROGRAMA");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
                        nodo.addHijos((Nodo)decl);
                        nodo.addHijos((Nodo)cp);
                        RESULT = nodo;

                :}
                | stmnt:s cuerpoPrograma:cp
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LINEA PROGRAMA");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
                        nodo.addHijos((Nodo)s);
                        nodo.addHijos((Nodo)cp);
                        RESULT = nodo;
                :}
                
                |/*lambda*/
                {:
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                :}
                ;
//Declaracion
declaracion ::= especificadorTipo:tipo declaracionVar:var PUNTOCOMA
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("DECLARACION VARIABLE");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)var);
                        RESULT = nodo;
                :}
                ;

//Declaracion Var
declaracionVar ::=  listaIdentificadores:li
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("INICIALIZACION VARIABLE");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.addHijos((Nodo)li);
                        RESULT = nodo;
                :}
                | exprAsignacion:ea  
                {:
                RESULT = (Nodo) ea;
                :}   
                | exprAsignacion:ea COMMA declaracionVar:dv
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INICIALIZACION VARIABLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                nodo.addHijos((Nodo)ea);
                nodo.addHijos((Nodo)dv);
                RESULT = nodo;
                :}
                ;

//Lista Identificadores
listaIdentificadores::= ID:id
                        {:

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            identificador.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            identificador.setValor(id);
                            RESULT = identificador;
                        :}            
                        |listaIdentificadores:ld COMMA ID:id
                        {:Nodo nodo = new Nodo();
                            nodo.setEtiqueta("LISTA IDENTIFICADORES");
                            nodo.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            identificador.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            identificador.setValor(id);
                            
                            nodo.addHijos((Nodo)ld);
                            nodo.addHijos(identificador);
                            RESULT = nodo; :}
                        ;

//Statements
stmnt::= 
        stmntComandos:sc PUNTOCOMA
                {:
                RESULT = (Nodo)sc;
                :}
        |stmntCompuesto:sc
                {:
                RESULT = (Nodo)sc;
                :}
        |stmntSeleccion:ss
                {:
                RESULT = (Nodo)ss;
                :}
        |stmntIteracion:si
                {:
                RESULT = (Nodo)si;
                :}
        |stmntExpresion:se
                {:
                RESULT = (Nodo)se;
                :}
        |stmntSalto:sso
                {:
                RESULT = (Nodo)sso;
                :}
        |PUNTOCOMA
                {:
                 Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                :}
        ;

//Comandos printf y scanf
stmntComandos::= PRINTF  LPAR CONSTSTRING:cs RPAR
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO PRINTF 1 ARG");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL PRINT
                Nodo printf = new Nodo();
                printf.setEtiqueta("PRINTF");
                printf.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                cadena.setValor(cs);

                nodo.addHijos(printf);
                nodo.addHijos(cadena);

                RESULT = nodo;
                :}
        | PRINTF LPAR CONSTSTRING:cs COMMA listaIdentificadores:li RPAR 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO PRINTF 2ARG ");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL PRINT
                Nodo printf = new Nodo();
                printf.setEtiqueta("PRINTF");
                printf.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("CONST STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //cadena.setValor(cs);

                nodo.addHijos(printf);
                nodo.addHijos(cadena);
                nodo.addHijos((Nodo)li);

                RESULT = nodo;
                :}
        | SCANF LPAR CONSTSTRING:c COMMA APUNTADORVAR:av RPAR 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO SCANF");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL SCANF
                Nodo a = new Nodo();
                a.setEtiqueta("SCANF");
                a.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("CONST STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //cadena.setValor(c);

                //TERMINAL REFERENCIA
                Nodo referencia = new Nodo();
                referencia.setEtiqueta("VALOR DE REFERENCIA");
                referencia.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //referencia.setValor(av);

                nodo.addHijos(a);
                nodo.addHijos(cadena);
                nodo.addHijos(referencia);

                //nodo.addHijos(cadena);
                //nodo.addHijos(referencia);

                RESULT = nodo;
                :}
        ;

//Statement Compuesto
stmntCompuesto ::= IZQLLAVE listaBloques:lb DERLLAVE
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT COMPUESTO");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)lb);
                RESULT = nodo;
                :}
                    | IZQLLAVE DERLLAVE
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT COMPUESTO VACIO");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                RESULT = nodo;
                :}
                ;

//Lista Bloques
listaBloques ::= itemBloque:b
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA BLOQUES");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)b);
                RESULT = nodo;
                :}
                | itemBloque:b listaBloques:lb
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA BLOQUES");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)b);
                nodo.addHijos((Nodo)lb);

                RESULT = nodo;
                :}
                ;

//Item Bloque
itemBloque ::= stmnt:s
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ITEM DE BLOQUE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)s);
                RESULT = nodo;
                :}
                |declaracion:d
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ITEM DE BLOQUE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)d);
                RESULT = nodo;
                :}
                ;

//Statement Seleccion
stmntSeleccion ::= IF LPAR expresion:e RPAR stmnt:s 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT SELECCION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL IF
                Nodo _if = new Nodo();
                _if.setEtiqueta("IF");
                _if.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(_if);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s);

                RESULT = nodo;
                :}
                    |  IF LPAR expresion:e RPAR stmnt:s1 ELSE stmnt:s2 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT SELECCION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL IF
                Nodo _if = new Nodo();
                _if.setEtiqueta("IF");
                _if.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL ELSE
                Nodo _else = new Nodo();
                _else.setEtiqueta("ELSE");
                _else.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(_if);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s1);
                nodo.addHijos(_else);
                nodo.addHijos((Nodo)s2);

                RESULT = nodo;
                :}
                ;   

//Statement Iteracion
stmntIteracion ::= WHILE LPAR expresion:e RPAR stmnt:s
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT ITERACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL WHILE
                Nodo mientras = new Nodo();
                mientras.setEtiqueta("CICLO WHILE");
                mientras.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(mientras);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s);

                RESULT = nodo;

                :}

                    | FOR LPAR declaracion:d exprRelacional:er PUNTOCOMA  exprIncrementos:ei RPAR stmnt:s
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CICLO FOR");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL FOR
                Nodo _for = new Nodo();
                _for.setEtiqueta("FOR");
                _for.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)_for);
                nodo.addHijos((Nodo)d);
                nodo.addHijos((Nodo)er);
                nodo.addHijos((Nodo)ei);
                nodo.addHijos((Nodo)s);
                
                RESULT = nodo;
                :}
                |error OPREL
                ;

//Statement Salto
stmntSalto ::= 
                BREAK PUNTOCOMA
                {:
                //Terminal BREAK
                Nodo quebrar = new Nodo();
                quebrar.setEtiqueta("BREAK");
                quebrar.setID(parser.cont_Nodos);
                parser.cont_Nodos++;;
                RESULT = quebrar;
                :}
                |RETURN expresion:e PUNTOCOMA 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT RETURN VALOR");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                 //Terminal RETURN
                Nodo retornar = new Nodo();
                retornar.setEtiqueta("RETURN");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(retornar);
                nodo.addHijos((Nodo)e);

                RESULT = nodo;
                :}
                |RETURN PUNTOCOMA
                {:

                //Terminal RETURN
                Nodo retornar = new Nodo();
                retornar.setEtiqueta("RETURN");
                retornar.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                RESULT = retornar;
                :}
                ;

// Statement Expresion
stmntExpresion ::=  expresion:e PUNTOCOMA
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT EXPRESION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)e);
                RESULT = nodo;
                :}
                ;

/*Consultar AND y OR*/
//Expresion
expresion ::= 
                exprSimple:es
                {:
                RESULT = (Nodo)es;
                :}
                | exprRelacional:er
                {:
                RESULT = (Nodo)er;
                :}
                | condicion:cond1 OPLOGIC:op condicion:cond2 
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION LOGICA");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                Nodo logico = new Nodo();
                logico.setEtiqueta("OPERADOR LOGICO");
                logico.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                logico.setValor(op);

                nodo.addHijos((Nodo)cond1);
                nodo.addHijos((Nodo)logico);
                nodo.addHijos((Nodo)cond2);

                RESULT = nodo;

                :}
                | exprAsignacion:ea
                {:
                RESULT = (Nodo)ea;
                :}
                | exprIncrementos:ei PUNTOCOMA
                {:
                
                RESULT = (Nodo)ei;
                :}
                |error OPLOGIC
                ;
//Expresion autoincrementos
exprIncrementos::= ID:id AUTOINCREMENTOS:ai 
                {:

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION AUTO OPSUMA");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal AUTOINCREMENTOS
                Nodo auto = new Nodo();
                auto.setEtiqueta("AUTO OPSUM");
                auto.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                auto.setValor(ai);

                nodo.addHijos(identificador);
                nodo.addHijos(auto);
                RESULT = nodo;
                :}
                ;

//ExpresionAsignacion
exprAsignacion ::= ID:id ASIGNACION:asig expresion:e
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION ASIGNACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal ASIGNACION
                Nodo asignacion = new Nodo();
                asignacion.setEtiqueta("ASIGNACION");
                asignacion.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(identificador);
                nodo.addHijos(asignacion);
                nodo.addHijos((Nodo)e);

                RESULT = nodo; 
                :}
                | ID:id ASIGNACION:asig  APUNTADORVAR:av
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION ASIGNACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal ASIGNACION
                Nodo asignacion = new Nodo();
                asignacion.setEtiqueta("ASIGNACION");
                asignacion.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //asignacion.setValor(asig);

                //Terminal APUNTADORVAR
                Nodo referencia = new Nodo();
                referencia.setEtiqueta("VALOR DE REFERENCIA");
                referencia.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                referencia.setValor(av);

                nodo.addHijos(identificador);
                nodo.addHijos(asignacion);
                nodo.addHijos(referencia);
                RESULT = nodo;
                :}
                ;

condicion ::= exprSimple:es
                {:
                
                RESULT = (Nodo)es;
                :}
                | exprRelacional:exprRel
                {:

                RESULT = (Nodo)exprRel;
                :}
                | error ASIGNACION
                | error OPREL
                ;

//Expresion Relacional
exprRelacional::= exprSimple:es1 OPREL:opr exprSimple:es2
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION RELACIONAL");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                Nodo relacional = new Nodo();
                relacional.setEtiqueta("OPREL");
                relacional.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                relacional.setValor(opr);

                nodo.addHijos((Nodo)es1);
                nodo.addHijos(relacional);
                nodo.addHijos((Nodo)es2);
                RESULT = nodo;
                :}
                ;
//exprSimple
exprSimple ::= termino:t
               {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION SIMPLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)t);
                RESULT = nodo;
               :} 
        | exprSimple:es OPSUM:sum termino:t
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION SIMPLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal OPSUM
                Nodo suma = new Nodo();
                suma.setEtiqueta("OPSUM");
                suma.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                suma.setValor(sum);

                nodo.addHijos((Nodo)es);
                nodo.addHijos(suma);
                nodo.addHijos((Nodo)t);
                RESULT = nodo;
                :}
        ;
termino ::= operando:op
                {:
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("TERMINO");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;

                    nodo.addHijos((Nodo)op);
                    RESULT = nodo;
                :}
                | termino:t OPMULT:opm operando:op
                {:
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("TERMINO");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;

                    Nodo mult = new Nodo();
                    mult.setEtiqueta("OPMULT");
                    mult.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    mult.setValor(opm);

                    nodo.addHijos((Nodo)t);
                    nodo.addHijos(mult);
                    nodo.addHijos((Nodo)op);
                    RESULT = nodo;
                :}
                ;
//Operando
operando ::=    ID:id
                {:
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);

                    RESULT = identificador;
                :}
                | constante:_const  
                {:
                    RESULT = (Nodo)_const;
                :}
                | LPAR expresion:e RPAR
                {:
                    RESULT = (Nodo)e;
                :}
                |llamadoFunc:lf
                {:
                    RESULT = (Nodo)lf;
                :}
                ;
//Constante
constante ::=  INTEGER:i
                {:
                    Nodo entero = new Nodo();
                    entero.setEtiqueta("INT");
                    entero.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    entero.setValor(i);
                    RESULT = entero;
                :}
                | CONSTCHAR:c
                {:
                    //terminal CHAR
                    Nodo caracter = new Nodo();
                    caracter.setEtiqueta("CHAR");
                    caracter.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    caracter.setValor(c);
                    RESULT = caracter;
                :};
//Statement Funcion
llamadoFunc ::= 
                ID:id LPAR RPAR
                {:
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("LLAMADA A FUNCION");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);
                    nodo.addHijos(identificador);
                    RESULT = nodo;
                :}
                |ID:id LPAR  listaIdentificadores:li RPAR 
                {:
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("LLAMADA A FUNCION");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);
                    
                    nodo.addHijos(identificador);
                    nodo.addHijos((Nodo)li);
                    RESULT = nodo;
                :}
                ;
/*
//Operador Condicional
exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion
                ;
*/
//Lista Subprogramas
subprogramas::= subprogramas:sp subprograma:subp
                {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LISTA SUBPROGRAMAS");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;

                        nodo.addHijos((Nodo)sp);
                        nodo.addHijos((Nodo)subp);
                        RESULT = nodo;
                
                :}

                | subprograma:sp
                {:
                RESULT = (Nodo)sp;
                :}
                ;

//subprograma
subprograma::= especificadorTipo:et ID:id LPAR listaParametros:lp RPAR IZQLLAVE cuerpoPrograma:Cp DERLLAVE
                        {:
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("Subprograma");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                
                        //Terminal ID
                        Nodo identificador = new Nodo();
                        identificador.setEtiqueta("ID");
                        identificador.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        identificador.setValor(id);

                        nodo.addHijos((Nodo)et);
                        nodo.addHijos(identificador);
                        nodo.addHijos((Nodo)lp);
                        nodo.addHijos((Nodo)Cp);
                        :}
                        ;





//Prototipo de funcion
prototipoFunc ::= especificadorTipo:et ID:id LPAR listaParametros:lp RPAR PUNTOCOMA
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("Prototipo de Funcion");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);
                    
                nodo.addHijos((Nodo)et);
                nodo.addHijos(identificador);
                nodo.addHijos((Nodo)lp);
                RESULT = nodo;
                :}; 
listaPrototipos ::= listaPrototipos:lp prototipoFunc:pf
                {:
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA PROTOTIPOS");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;


                nodo.addHijos((Nodo)lp);
                nodo.addHijos((Nodo)pf);
                RESULT = nodo;
                :} 
                | prototipoFunc:pf
                {:
                RESULT = (Nodo)pf;
                :}
                ;

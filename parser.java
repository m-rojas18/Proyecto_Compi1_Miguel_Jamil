
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\012\005\000" +
    "\002\012\003\000\002\013\004\000\002\013\002\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\011\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\004\000" +
    "\002\017\003\000\002\017\003\000\002\027\006\000\002" +
    "\027\010\000\002\027\010\000\002\030\005\000\002\030" +
    "\004\000\002\031\003\000\002\031\004\000\002\032\003" +
    "\000\002\032\003\000\002\035\007\000\002\035\011\000" +
    "\002\036\007\000\002\036\014\000\002\036\013\000\002" +
    "\037\004\000\002\037\005\000\002\037\004\000\002\034" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\003\000\002\014\004\000\002\020\005\000" +
    "\002\020\005\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\003\000\002\026\005\000" +
    "\002\026\006\000\002\040\005\000\002\040\003\000\002" +
    "\041\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\003\006\016\007\001\002\000\004\002" +
    "\240\001\002\000\014\002\uffff\013\015\016\020\017\017" +
    "\033\013\001\002\000\012\035\222\036\221\037\223\041" +
    "\220\001\002\000\004\010\010\001\002\000\004\036\011" +
    "\001\002\000\016\013\015\016\020\017\017\033\013\034" +
    "\ufff6\037\ufff6\001\002\000\006\034\022\037\023\001\002" +
    "\000\004\031\ufff2\001\002\000\006\034\ufff8\037\ufff8\001" +
    "\002\000\004\031\ufff5\001\002\000\004\031\021\001\002" +
    "\000\004\031\ufff4\001\002\000\004\031\ufff3\001\002\000" +
    "\006\034\ufff7\037\ufff7\001\002\000\016\013\015\016\020" +
    "\017\017\033\013\034\ufff6\037\ufff6\001\002\000\004\040" +
    "\024\001\002\000\050\003\046\004\042\006\057\007\036" +
    "\011\052\012\045\013\015\014\053\015\026\016\020\017" +
    "\017\026\032\030\063\031\044\033\013\035\035\036\062" +
    "\040\060\041\uffef\001\002\000\012\025\uffc2\034\uffc9\035" +
    "\uffc9\037\uffc9\001\002\000\004\036\212\001\002\000\004" +
    "\025\206\001\002\000\050\003\046\004\042\006\057\007" +
    "\036\011\052\012\045\013\015\014\053\015\026\016\020" +
    "\017\017\026\032\030\063\031\044\033\013\035\035\036" +
    "\062\040\060\041\uffef\001\002\000\020\020\uffbe\021\uffbe" +
    "\024\uffbe\025\uffbe\034\uffbe\035\uffbe\037\uffbe\001\002\000" +
    "\020\020\uffde\021\uffde\024\uffde\025\uffde\034\uffde\035\uffde" +
    "\037\uffde\001\002\000\020\020\uffb9\021\uffb9\024\uffb9\025" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\001\002\000\010\034\uffc7" +
    "\035\uffc7\037\uffc7\001\002\000\054\003\uffe0\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\026\uffe0\030\uffe0\031\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\001\002" +
    "\000\004\036\164\001\002\000\004\031\156\001\002\000" +
    "\004\035\154\001\002\000\052\003\uffe7\004\uffe7\006\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\026\uffe7\030\uffe7\031\uffe7\033\uffe7\034\152" +
    "\035\uffe7\036\uffe7\040\uffe7\041\uffe7\001\002\000\004\036" +
    "\144\001\002\000\054\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\026\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\001\002\000\026\020" +
    "\uffbc\021\uffbc\022\141\023\140\024\uffbc\025\uffbc\034\uffbc" +
    "\035\uffbc\036\110\037\uffbc\001\002\000\014\026\032\030" +
    "\063\031\044\035\136\036\062\001\002\000\004\035\134" +
    "\001\002\000\054\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\026\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\040\uffe1\041\uffe1\001\002\000\004\035\133" +
    "\001\002\000\004\041\132\001\002\000\004\035\131\001" +
    "\002\000\004\036\123\001\002\000\016\020\120\024\117" +
    "\025\uffc3\034\uffca\035\uffca\037\uffca\001\002\000\054\003" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\041\uffe4\001\002\000\020\020\uffc0\021\105\024\uffc0\025" +
    "\uffc0\034\uffc0\035\uffc0\037\uffc0\001\002\000\004\036\101" +
    "\001\002\000\050\003\046\004\042\006\057\007\036\011" +
    "\052\012\045\013\015\014\053\015\026\016\020\017\017" +
    "\026\032\030\063\031\044\033\013\035\035\036\062\040" +
    "\060\041\075\001\002\000\054\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\026\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\001\002\000" +
    "\012\026\032\030\063\031\044\036\062\001\002\000\020" +
    "\020\uffdd\021\uffdd\024\uffdd\025\uffdd\034\uffdd\035\uffdd\037" +
    "\uffdd\001\002\000\020\020\uffbb\021\uffbb\024\uffbb\025\uffbb" +
    "\034\uffbb\035\uffbb\037\uffbb\001\002\000\050\003\046\004" +
    "\042\006\057\007\036\011\052\012\045\013\015\014\053" +
    "\015\026\016\020\017\017\026\032\030\063\031\044\033" +
    "\013\035\035\036\062\040\060\041\uffef\001\002\000\054" +
    "\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040" +
    "\uffe2\041\uffe2\001\002\000\004\041\ufff1\001\002\000\004" +
    "\037\071\001\002\000\020\020\uffba\021\uffba\024\uffba\025" +
    "\uffba\034\uffba\035\uffba\037\uffba\001\002\000\004\041\100" +
    "\001\002\000\050\003\046\004\042\006\057\007\036\011" +
    "\052\012\045\013\015\014\053\015\026\016\020\017\017" +
    "\026\032\030\063\031\044\033\013\035\035\036\062\040" +
    "\060\041\uffd7\001\002\000\050\003\uffd5\004\uffd5\006\uffd5" +
    "\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\026\uffd5\030\uffd5\031\uffd5\033\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\041\uffd5\001\002\000\054\003\uffd8\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\026\uffd8\030\uffd8\031" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8" +
    "\001\002\000\050\003\uffd4\004\uffd4\006\uffd4\007\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\026\uffd4\030\uffd4\031\uffd4\033\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\001\002\000\004\041\uffd6\001\002\000\054" +
    "\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\012\026\032\030\063\031\044" +
    "\036\062\001\002\000\004\037\103\001\002\000\036\003" +
    "\046\004\042\006\057\007\036\011\052\012\045\014\053" +
    "\015\026\026\032\030\063\031\044\035\035\036\062\040" +
    "\060\001\002\000\054\003\uffd1\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\026\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\041\uffd1\001\002\000\012\026" +
    "\032\030\063\031\106\036\062\001\002\000\022\020\uffbc" +
    "\021\uffbc\024\uffbc\025\uffbc\034\uffbc\035\uffbc\036\110\037" +
    "\uffbc\001\002\000\020\020\uffbd\021\uffbd\024\uffbd\025\uffbd" +
    "\034\uffbd\035\uffbd\037\uffbd\001\002\000\006\031\111\037" +
    "\113\001\002\000\006\034\uffea\037\uffea\001\002\000\006" +
    "\034\114\037\115\001\002\000\020\020\uffb8\021\uffb8\024" +
    "\uffb8\025\uffb8\034\uffb8\035\uffb8\037\uffb8\001\002\000\004" +
    "\031\116\001\002\000\020\020\uffb7\021\uffb7\024\uffb7\025" +
    "\uffb7\034\uffb7\035\uffb7\037\uffb7\001\002\000\010\034\uffe9" +
    "\035\uffe9\037\uffe9\001\002\000\012\026\032\030\063\031" +
    "\106\036\062\001\002\000\012\026\032\030\063\031\106" +
    "\036\062\001\002\000\020\020\uffbf\021\105\024\uffbf\025" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\001\002\000\014\020\120" +
    "\025\uffc1\034\uffc1\035\uffc1\037\uffc1\001\002\000\004\027" +
    "\124\001\002\000\006\034\125\037\126\001\002\000\004" +
    "\031\111\001\002\000\004\035\uffdc\001\002\000\006\034" +
    "\114\037\130\001\002\000\004\035\uffdb\001\002\000\054" +
    "\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\026\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040" +
    "\uffce\041\uffce\001\002\000\014\002\ufffe\013\ufffe\016\ufffe" +
    "\017\ufffe\033\ufffe\001\002\000\054\003\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\026\uffcb\030\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041\uffcb\001\002" +
    "\000\054\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\026\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\004\035\137\001\002" +
    "\000\054\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\054\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\001" +
    "\002\000\014\026\032\030\063\031\044\032\142\036\062" +
    "\001\002\000\010\034\uffc6\035\uffc6\037\uffc6\001\002\000" +
    "\010\034\uffc4\035\uffc4\037\uffc4\001\002\000\010\034\uffc5" +
    "\035\uffc5\037\uffc5\001\002\000\012\026\032\030\063\031" +
    "\044\036\062\001\002\000\004\037\146\001\002\000\036" +
    "\003\046\004\042\006\057\007\036\011\052\012\045\014" +
    "\053\015\026\026\032\030\063\031\044\035\035\036\062" +
    "\040\060\001\002\000\054\003\uffd3\004\uffd3\005\150\006" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\026\uffd3\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\001\002\000\036" +
    "\003\046\004\042\006\057\007\036\011\052\012\045\014" +
    "\053\015\026\026\032\030\063\031\044\035\035\036\062" +
    "\040\060\001\002\000\054\003\uffd2\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\026\uffd2\030\uffd2\031\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\001\002\000\036" +
    "\003\046\004\042\006\057\007\036\011\052\012\045\014" +
    "\053\015\026\026\032\030\063\031\044\035\035\036\062" +
    "\040\060\001\002\000\050\003\uffe8\004\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\026\uffe8\030\uffe8\031\uffe8\033\uffe8\035\uffe8\036" +
    "\uffe8\040\uffe8\041\uffe8\001\002\000\054\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\001" +
    "\002\000\006\034\162\035\uffec\001\002\000\010\023\140" +
    "\034\uffea\035\uffea\001\002\000\006\034\114\035\uffed\001" +
    "\002\000\004\035\161\001\002\000\050\003\uffee\004\uffee" +
    "\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\026\uffee\030\uffee\031\uffee\033\uffee" +
    "\035\uffee\036\uffee\040\uffee\041\uffee\001\002\000\004\031" +
    "\156\001\002\000\004\035\uffeb\001\002\000\014\013\015" +
    "\016\020\017\017\031\166\033\013\001\002\000\004\035" +
    "\176\001\002\000\004\023\140\001\002\000\012\026\032" +
    "\030\063\031\044\036\062\001\002\000\004\035\171\001" +
    "\002\000\004\031\172\001\002\000\004\022\173\001\002" +
    "\000\004\037\174\001\002\000\036\003\046\004\042\006" +
    "\057\007\036\011\052\012\045\014\053\015\026\026\032" +
    "\030\063\031\044\035\035\036\062\040\060\001\002\000" +
    "\054\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\026" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\040\uffcf\041\uffcf\001\002\000\012\026\032\030\063\031" +
    "\044\036\062\001\002\000\004\035\200\001\002\000\004" +
    "\031\201\001\002\000\004\022\202\001\002\000\004\037" +
    "\203\001\002\000\036\003\046\004\042\006\057\007\036" +
    "\011\052\012\045\014\053\015\026\026\032\030\063\031" +
    "\044\035\035\036\062\040\060\001\002\000\054\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\026\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041" +
    "\uffd0\001\002\000\004\041\ufff0\001\002\000\012\026\032" +
    "\030\063\031\106\036\062\001\002\000\014\020\120\024" +
    "\117\034\uffc3\035\uffc3\037\uffc3\001\002\000\010\034\uffc2" +
    "\035\uffc2\037\uffc2\001\002\000\010\034\uffc8\035\uffc8\037" +
    "\uffc8\001\002\000\004\027\213\001\002\000\004\034\214" +
    "\001\002\000\004\032\215\001\002\000\004\037\216\001" +
    "\002\000\004\035\uffda\001\002\000\006\034\ufff9\037\ufff9" +
    "\001\002\000\014\002\ufffc\013\ufffc\016\ufffc\017\ufffc\033" +
    "\ufffc\001\002\000\014\002\ufffb\013\ufffb\016\ufffb\017\ufffb" +
    "\033\ufffb\001\002\000\014\002\ufffd\013\ufffd\016\ufffd\017" +
    "\ufffd\033\ufffd\001\002\000\014\002\ufffa\013\ufffa\016\ufffa" +
    "\017\ufffa\033\ufffa\001\002\000\004\002\000\001\002\000" +
    "\006\002\uffb5\034\236\001\002\000\004\031\227\001\002" +
    "\000\004\036\230\001\002\000\016\013\015\016\020\017" +
    "\017\033\013\034\ufff6\037\ufff6\001\002\000\006\034\022" +
    "\037\232\001\002\000\004\040\233\001\002\000\050\003" +
    "\046\004\042\006\057\007\036\011\052\012\045\013\015" +
    "\014\053\015\026\016\020\017\017\026\032\030\063\031" +
    "\044\033\013\035\035\036\062\040\060\041\uffef\001\002" +
    "\000\004\041\235\001\002\000\006\002\uffb4\034\uffb4\001" +
    "\002\000\012\013\015\016\020\017\017\033\013\001\002" +
    "\000\004\002\uffb6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\006\225\040\223\041\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\015\012\011\013\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\015\013\216\001\001\000\002\001\001\000" +
    "\052\004\050\005\064\006\036\007\030\014\047\015\053" +
    "\016\055\017\063\020\033\022\026\023\024\024\027\025" +
    "\040\026\032\027\037\030\042\034\065\035\054\036\060" +
    "\037\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\204\005\064\006\036\007\030" +
    "\014\047\015\053\016\055\017\063\020\033\022\026\023" +
    "\024\024\027\025\040\026\032\027\037\030\042\034\065" +
    "\035\054\036\060\037\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\157\011\156\020" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\030\014\134\015\053\016\055\017\063\020\033\022\026" +
    "\023\024\026\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\005\075\006\036" +
    "\007\030\014\047\015\053\016\055\017\063\020\033\022" +
    "\026\023\024\025\073\026\032\027\037\030\042\031\071" +
    "\032\072\034\065\035\054\036\060\037\046\001\001\000" +
    "\002\001\001\000\024\007\030\014\067\015\053\016\055" +
    "\017\063\020\033\022\026\023\024\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\066\005\064" +
    "\006\036\007\030\014\047\015\053\016\055\017\063\020" +
    "\033\022\026\023\024\024\027\025\040\026\032\027\037" +
    "\030\042\034\065\035\054\036\060\037\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\005\075\006\036\007" +
    "\030\014\047\015\053\016\055\017\063\020\033\022\026" +
    "\023\024\025\073\026\032\027\037\030\042\031\076\032" +
    "\072\034\065\035\054\036\060\037\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\007\030\014\101\015\053" +
    "\016\055\017\063\020\033\022\026\023\024\026\032\001" +
    "\001\000\002\001\001\000\042\007\030\014\047\015\053" +
    "\016\055\017\063\020\033\022\026\023\024\025\103\026" +
    "\032\027\037\030\042\034\065\035\054\036\060\037\046" +
    "\001\001\000\002\001\001\000\010\007\106\017\063\026" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\030\015\121\016\055\017\063\026" +
    "\032\001\001\000\012\007\030\016\120\017\063\026\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\030\014\142\015\053\016\055\017\063\020\033" +
    "\022\026\023\024\026\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\030\014\144" +
    "\015\053\016\055\017\063\020\033\022\026\023\024\026" +
    "\032\001\001\000\002\001\001\000\042\007\030\014\047" +
    "\015\053\016\055\017\063\020\033\022\026\023\024\025" +
    "\146\026\032\027\037\030\042\034\065\035\054\036\060" +
    "\037\046\001\001\000\002\001\001\000\042\007\030\014" +
    "\047\015\053\016\055\017\063\020\033\022\026\023\024" +
    "\025\150\026\032\027\037\030\042\034\065\035\054\036" +
    "\060\037\046\001\001\000\002\001\001\000\044\007\030" +
    "\014\047\015\053\016\055\017\063\020\033\022\026\023" +
    "\024\024\152\025\040\026\032\027\037\030\042\034\065" +
    "\035\054\036\060\037\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\162\011\156\020\154\001\001\000\002\001\001\000\010" +
    "\005\166\006\036\020\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\030\014\167\015\053\016\055" +
    "\017\063\020\033\022\026\023\024\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\007\030\014\047\015\053\016\055\017" +
    "\063\020\033\022\026\023\024\025\174\026\032\027\037" +
    "\030\042\034\065\035\054\036\060\037\046\001\001\000" +
    "\002\001\001\000\024\007\030\014\176\015\053\016\055" +
    "\017\063\020\033\022\026\023\024\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\007\030\014\047\015\053\016\055\017" +
    "\063\020\033\022\026\023\024\025\203\026\032\027\037" +
    "\030\042\034\065\035\054\036\060\037\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\030\015\206" +
    "\016\055\017\063\022\210\023\207\026\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\015\012\230\013\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\004\233\005\064" +
    "\006\036\007\030\014\047\015\053\016\055\017\063\020" +
    "\033\022\026\023\024\024\027\025\040\026\032\027\037" +
    "\030\042\034\065\035\054\036\060\037\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\225\040\236" +
    "\041\224\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static int num_erroresSintactico = 0;
        public static Nodo padre;
        public static int cont_Nodos = 0;

        public void syntax_error(Symbol s){
                num_erroresSintactico ++;
                System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma subprogramas 
            {
              Object RESULT =null;
		int inicProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inicProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA CON SUBPROGRAMAS");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;

        nodo.addHijos((Nodo) inicProg);
        nodo.addHijos((Nodo) subProg);

        parser.padre = nodo;
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;
		int inicProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inicProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA SOLO MAIN");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;
        nodo.addHijos((Nodo) inicProg);

        parser.padre = nodo;
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;
		int lparametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lparametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lparametros = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cuerpoP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   Nodo nodo = new Nodo();
                   nodo.setEtiqueta("MAIN");
                   nodo.setID(parser.cont_Nodos);
                   parser.cont_Nodos++;

                   nodo.addHijos((Nodo)lparametros);
                   nodo.addHijos((Nodo)cuerpoP);
                   RESULT= nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicioprograma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicioprograma ::= error DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicioprograma ::= error LPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicioprograma ::= error RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;
		int listaPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object listaP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Nodo nodo = new Nodo();
                           nodo.setEtiqueta("LISTA DE PARAMETROS");
                           nodo.setID(parser.cont_Nodos);
                           parser.cont_Nodos++;

                           nodo.addHijos((Nodo) listaP);
                           nodo.addHijos((Nodo)param);
                           RESULT = nodo;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaParametros ::= parametro 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = (Nodo)param;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("PAREMETRO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;

                        //terminal ID
                        Nodo identificador = new Nodo();
                        identificador.setEtiqueta("ID");
                        identificador.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        identificador.setValor(id);
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)identificador);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro ::= 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("VOID");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("CHAR");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // especificadorTipo ::= INT 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("INT");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;
		int pointerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pointerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pointer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor(pointer);
                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpoPrograma ::= declaracion cuerpoPrograma 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("CUERPO PROGRAMA");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
                        nodo.addHijos((Nodo)decl);
                        nodo.addHijos((Nodo)cp);
                        RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoPrograma ::= statements cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpoPrograma ::= 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("DECLARACION VARIABLE");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)var);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = (Nodo)li;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionVar ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionVar ::= exprAsignacion COMMA declaracionVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            identificador.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            identificador.setValor(id);
                            RESULT = identificador;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nodo = new Nodo();
                            nodo.setEtiqueta("LISTA IDENTIFICADORES");
                            nodo.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            nodo.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            nodo.setValor(id);
                            nodo.addHijos(identificador);
                            RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= stmnt COMMA statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmnt ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // itemBloque ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // itemBloque ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmntIteracion ::= WHILE LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmntIteracion ::= FOR LPAR exprAsignacion PUNTOCOMA expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("FOR (" + k);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmntIteracion ::= FOR LPAR declaracion expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("BREAK;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmntSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= condicion OPLOGIC condicion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("OPLOGIC: " + op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprRelacional ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelacional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprSimple ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprSimple ::= exprSimple OPSUM termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino ::= termino OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operando ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID operador" + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operando ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operando ::= llamadoFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamadoFunc ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // llamadoFunc ::= ID LPAR listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // subprogramas ::= subprograma COMMA subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // subprograma ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

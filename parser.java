
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\012\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\012\005\000\002\012\003\000\002\013\004\000\002" +
    "\013\002\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\005\000\002\023\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\025\006\000\002\025\010\000" +
    "\002\025\010\000\002\026\005\000\002\026\004\000\002" +
    "\027\003\000\002\027\004\000\002\030\003\000\002\030" +
    "\003\000\002\032\007\000\002\032\011\000\002\033\007" +
    "\000\002\033\012\000\002\033\004\000\002\034\004\000" +
    "\002\034\005\000\002\034\004\000\002\031\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\003\000\002\014\004\000\002\014\004\000\002\037\004" +
    "\000\002\020\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\022\005\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\005\000\002\007\003\000\002\017\003\000" +
    "\002\017\003\000\002\024\005\000\002\024\006\000\002" +
    "\035\004\000\002\035\003\000\002\036\012\000\002\040" +
    "\010\000\002\041\004\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\003\012\013\010\016\005\017\014\033" +
    "\007\001\002\000\004\002\246\001\002\000\006\010\237" +
    "\031\ufff2\001\002\000\004\031\232\001\002\000\004\031" +
    "\ufff1\001\002\000\004\031\ufff4\001\002\000\014\003\uffaf" +
    "\013\uffaf\016\uffaf\017\uffaf\033\uffaf\001\002\000\014\036" +
    "\225\037\230\040\227\041\231\043\226\001\002\000\004" +
    "\002\uffff\001\002\000\004\031\ufff3\001\002\000\014\003" +
    "\012\013\010\016\005\017\014\033\007\001\002\000\014" +
    "\003\uffb0\013\uffb0\016\uffb0\017\uffb0\033\uffb0\001\002\000" +
    "\012\013\010\016\023\017\014\033\007\001\002\000\014" +
    "\002\000\013\010\016\023\017\014\033\007\001\002\000" +
    "\014\002\uffb3\013\uffb3\016\uffb3\017\uffb3\033\uffb3\001\002" +
    "\000\004\031\024\001\002\000\004\031\ufff2\001\002\000" +
    "\004\040\025\001\002\000\016\013\010\016\023\017\014" +
    "\033\007\036\ufff5\041\ufff5\001\002\000\006\036\032\041" +
    "\033\001\002\000\006\036\ufff7\041\ufff7\001\002\000\004" +
    "\031\031\001\002\000\006\036\ufff6\041\ufff6\001\002\000" +
    "\016\013\010\016\023\017\014\033\007\036\ufff5\041\ufff5" +
    "\001\002\000\004\042\034\001\002\000\050\003\056\004" +
    "\052\006\067\007\046\011\062\012\055\013\010\014\063" +
    "\015\036\016\023\017\014\026\041\030\073\031\054\033" +
    "\007\037\045\040\072\042\070\043\uffee\001\002\000\012" +
    "\025\uffc4\036\uffcd\037\uffcd\041\uffcd\001\002\000\004\040" +
    "\216\001\002\000\004\025\211\001\002\000\020\020\uffbe" +
    "\021\uffbe\024\uffbe\025\uffbe\036\uffbe\037\uffbe\041\uffbe\001" +
    "\002\000\020\020\uffb8\021\uffb8\024\uffb8\025\uffb8\036\uffb8" +
    "\037\uffb8\041\uffb8\001\002\000\020\020\uffb9\021\uffb9\024" +
    "\uffb9\025\uffb9\036\uffb9\037\uffb9\041\uffb9\001\002\000\010" +
    "\036\uffcb\037\uffcb\041\uffcb\001\002\000\004\037\210\001" +
    "\002\000\052\003\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\033\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\043\uffe1\001\002\000\004\040\177\001\002\000" +
    "\004\031\171\001\002\000\004\037\167\001\002\000\050" +
    "\003\056\004\052\006\067\007\046\011\062\012\055\013" +
    "\010\014\063\015\036\016\023\017\014\026\041\030\073" +
    "\031\054\033\007\037\045\040\072\042\070\043\uffee\001" +
    "\002\000\004\040\160\001\002\000\052\003\uffe6\004\uffe6" +
    "\005\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\001\002\000" +
    "\026\020\uffbc\021\uffbc\022\155\023\154\024\uffbc\025\uffbc" +
    "\036\uffbc\037\uffbc\040\124\041\uffbc\001\002\000\016\003" +
    "\101\026\041\030\073\031\054\037\152\040\072\001\002" +
    "\000\010\023\103\024\150\025\104\001\002\000\052\003" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\026\uffe2\030" +
    "\uffe2\031\uffe2\033\uffe2\037\uffe2\040\uffe2\042\uffe2\043\uffe2" +
    "\001\002\000\004\037\147\001\002\000\004\043\146\001" +
    "\002\000\004\037\145\001\002\000\004\040\137\001\002" +
    "\000\016\020\134\024\133\025\uffc5\036\uffce\037\uffce\041" +
    "\uffce\001\002\000\052\003\uffe5\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\026\uffe5\030\uffe5\031\uffe5\033\uffe5\037\uffe5" +
    "\040\uffe5\042\uffe5\043\uffe5\001\002\000\020\020\uffc0\021" +
    "\121\024\uffc0\025\uffc0\036\uffc0\037\uffc0\041\uffc0\001\002" +
    "\000\004\040\115\001\002\000\050\003\056\004\052\006" +
    "\067\007\046\011\062\012\055\013\010\014\063\015\036" +
    "\016\023\017\014\026\041\030\073\031\054\033\007\037" +
    "\045\040\072\042\070\043\111\001\002\000\052\003\uffe4" +
    "\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\026\uffe4\030\uffe4" +
    "\031\uffe4\033\uffe4\037\uffe4\040\uffe4\042\uffe4\043\uffe4\001" +
    "\002\000\014\003\101\026\041\030\073\031\054\040\072" +
    "\001\002\000\020\020\uffb7\021\uffb7\024\uffb7\025\uffb7\036" +
    "\uffb7\037\uffb7\041\uffb7\001\002\000\020\020\uffbb\021\uffbb" +
    "\024\uffbb\025\uffbb\036\uffbb\037\uffbb\041\uffbb\001\002\000" +
    "\050\003\056\004\052\006\067\007\046\011\062\012\055" +
    "\013\010\014\063\015\036\016\023\017\014\026\041\030" +
    "\073\031\054\033\007\037\045\040\072\042\070\043\uffee" +
    "\001\002\000\052\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\026\uffe3\030\uffe3\031\uffe3\033\uffe3\037\uffe3\040" +
    "\uffe3\042\uffe3\043\uffe3\001\002\000\004\043\ufff0\001\002" +
    "\000\004\041\105\001\002\000\010\023\103\024\102\025" +
    "\104\001\002\000\012\025\uffc2\036\uffc2\037\uffc2\041\uffc2" +
    "\001\002\000\012\025\uffc3\036\uffc3\037\uffc3\041\uffc3\001" +
    "\002\000\010\036\uffc9\037\uffc9\041\uffc9\001\002\000\020" +
    "\020\uffba\021\uffba\024\uffba\025\uffba\036\uffba\037\uffba\041" +
    "\uffba\001\002\000\004\043\114\001\002\000\050\003\056" +
    "\004\052\006\067\007\046\011\062\012\055\013\010\014" +
    "\063\015\036\016\023\017\014\026\041\030\073\031\054" +
    "\033\007\037\045\040\072\042\070\043\uffdb\001\002\000" +
    "\050\003\uffd9\004\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\033\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\001\002\000\052\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\026\uffdc\030\uffdc\031\uffdc\033\uffdc\037\uffdc\040" +
    "\uffdc\042\uffdc\043\uffdc\001\002\000\050\003\uffd8\004\uffd8" +
    "\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\026\uffd8\030\uffd8\031\uffd8\033\uffd8" +
    "\037\uffd8\040\uffd8\042\uffd8\043\uffd8\001\002\000\004\043" +
    "\uffda\001\002\000\052\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\026\uffdd\030\uffdd\031\uffdd\033\uffdd\037\uffdd" +
    "\040\uffdd\042\uffdd\043\uffdd\001\002\000\014\003\101\026" +
    "\041\030\073\031\054\040\072\001\002\000\004\041\117" +
    "\001\002\000\036\003\056\004\052\006\067\007\046\011" +
    "\062\012\055\014\063\015\036\026\041\030\073\031\054" +
    "\037\045\040\072\042\070\001\002\000\052\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\001\002" +
    "\000\012\026\041\030\073\031\122\040\072\001\002\000" +
    "\022\020\uffbc\021\uffbc\024\uffbc\025\uffbc\036\uffbc\037\uffbc" +
    "\040\124\041\uffbc\001\002\000\020\020\uffbd\021\uffbd\024" +
    "\uffbd\025\uffbd\036\uffbd\037\uffbd\041\uffbd\001\002\000\006" +
    "\031\125\041\127\001\002\000\006\036\uffe9\041\uffe9\001" +
    "\002\000\006\036\130\041\131\001\002\000\020\020\uffb6" +
    "\021\uffb6\024\uffb6\025\uffb6\036\uffb6\037\uffb6\041\uffb6\001" +
    "\002\000\004\031\132\001\002\000\020\020\uffb5\021\uffb5" +
    "\024\uffb5\025\uffb5\036\uffb5\037\uffb5\041\uffb5\001\002\000" +
    "\010\036\uffe8\037\uffe8\041\uffe8\001\002\000\012\026\041" +
    "\030\073\031\122\040\072\001\002\000\012\026\041\030" +
    "\073\031\122\040\072\001\002\000\020\020\uffbf\021\121" +
    "\024\uffbf\025\uffbf\036\uffbf\037\uffbf\041\uffbf\001\002\000" +
    "\014\020\134\025\uffc1\036\uffc1\037\uffc1\041\uffc1\001\002" +
    "\000\004\027\140\001\002\000\006\036\141\041\142\001" +
    "\002\000\004\031\125\001\002\000\004\037\uffe0\001\002" +
    "\000\006\036\130\041\144\001\002\000\004\037\uffdf\001" +
    "\002\000\052\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\026\uffd2\030\uffd2\031\uffd2\033\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\043\uffd2\001\002\000\014\002\uffb2\013\uffb2\016" +
    "\uffb2\017\uffb2\033\uffb2\001\002\000\052\003\uffcf\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\026\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\001\002\000" +
    "\054\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\025" +
    "\uffc2\026\uffd3\030\uffd3\031\uffd3\033\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\001\002\000\004\037\153\001\002\000" +
    "\052\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\026" +
    "\uffd0\030\uffd0\031\uffd0\033\uffd0\037\uffd0\040\uffd0\042\uffd0" +
    "\043\uffd0\001\002\000\052\003\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\026\uffd1\030\uffd1\031\uffd1\033\uffd1\037" +
    "\uffd1\040\uffd1\042\uffd1\043\uffd1\001\002\000\016\003\101" +
    "\026\041\030\073\031\054\032\156\040\072\001\002\000" +
    "\006\037\uffc8\041\uffc8\001\002\000\010\036\uffc6\037\uffc6" +
    "\041\uffc6\001\002\000\010\036\uffc7\037\uffc7\041\uffc7\001" +
    "\002\000\014\003\101\026\041\030\073\031\054\040\072" +
    "\001\002\000\004\041\162\001\002\000\036\003\056\004" +
    "\052\006\067\007\046\011\062\012\055\014\063\015\036" +
    "\026\041\030\073\031\054\037\045\040\072\042\070\001" +
    "\002\000\052\003\uffd7\004\uffd7\005\164\006\uffd7\007\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\026\uffd7\030\uffd7\031\uffd7\033\uffd7\037\uffd7\040\uffd7" +
    "\042\uffd7\043\uffd7\001\002\000\036\003\056\004\052\006" +
    "\067\007\046\011\062\012\055\014\063\015\036\026\041" +
    "\030\073\031\054\037\045\040\072\042\070\001\002\000" +
    "\052\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\026" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\037\uffd6\040\uffd6\042\uffd6" +
    "\043\uffd6\001\002\000\004\043\uffef\001\002\000\052\003" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\037\uffe7\040\uffe7\042\uffe7\043\uffe7" +
    "\001\002\000\006\036\175\037\uffeb\001\002\000\010\023" +
    "\154\036\uffe9\037\uffe9\001\002\000\006\036\130\037\uffec" +
    "\001\002\000\004\037\174\001\002\000\050\003\uffed\004" +
    "\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\026\uffed\030\uffed\031\uffed\033" +
    "\uffed\037\uffed\040\uffed\042\uffed\043\uffed\001\002\000\004" +
    "\031\171\001\002\000\004\037\uffea\001\002\000\012\013" +
    "\010\016\023\017\014\033\007\001\002\000\012\026\041" +
    "\030\073\031\122\040\072\001\002\000\006\020\134\024" +
    "\133\001\002\000\004\037\203\001\002\000\004\031\204" +
    "\001\002\000\004\022\155\001\002\000\004\041\206\001" +
    "\002\000\036\003\056\004\052\006\067\007\046\011\062" +
    "\012\055\014\063\015\036\026\041\030\073\031\054\037" +
    "\045\040\072\042\070\001\002\000\052\003\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\026\uffd4\030\uffd4\031\uffd4" +
    "\033\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\001\002\000" +
    "\010\036\uffca\037\uffca\041\uffca\001\002\000\014\003\215" +
    "\026\041\030\073\031\122\040\072\001\002\000\014\020" +
    "\134\024\133\036\uffc5\037\uffc5\041\uffc5\001\002\000\010" +
    "\036\uffc4\037\uffc4\041\uffc4\001\002\000\010\036\uffcc\037" +
    "\uffcc\041\uffcc\001\002\000\006\023\103\024\102\001\002" +
    "\000\004\027\217\001\002\000\004\036\220\001\002\000" +
    "\004\032\221\001\002\000\004\041\222\001\002\000\004" +
    "\037\uffde\001\002\000\006\036\ufff8\041\ufff8\001\002\000" +
    "\014\002\uffb4\013\uffb4\016\uffb4\017\uffb4\033\uffb4\001\002" +
    "\000\014\002\ufff9\013\ufff9\016\ufff9\017\ufff9\033\ufff9\001" +
    "\002\000\014\002\ufffc\013\ufffc\016\ufffc\017\ufffc\033\ufffc" +
    "\001\002\000\014\002\ufffb\013\ufffb\016\ufffb\017\ufffb\033" +
    "\ufffb\001\002\000\014\002\ufffd\013\ufffd\016\ufffd\017\ufffd" +
    "\033\ufffd\001\002\000\014\002\ufffa\013\ufffa\016\ufffa\017" +
    "\ufffa\033\ufffa\001\002\000\004\040\233\001\002\000\016" +
    "\013\010\016\023\017\014\033\007\036\ufff5\041\ufff5\001" +
    "\002\000\006\036\032\041\235\001\002\000\004\037\236" +
    "\001\002\000\014\003\uffb1\013\uffb1\016\uffb1\017\uffb1\033" +
    "\uffb1\001\002\000\004\040\240\001\002\000\016\013\010" +
    "\016\023\017\014\033\007\036\ufff5\041\ufff5\001\002\000" +
    "\006\036\032\041\242\001\002\000\004\042\243\001\002" +
    "\000\050\003\056\004\052\006\067\007\046\011\062\012" +
    "\055\013\010\014\063\015\036\016\023\017\014\026\041" +
    "\030\073\031\054\033\007\037\045\040\072\042\070\043" +
    "\uffee\001\002\000\004\043\245\001\002\000\014\002\ufffe" +
    "\013\ufffe\016\ufffe\017\ufffe\033\ufffe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\002\003\003\012\006\005\040\010\041" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\016\006\005\040\015\001\001\000\002\001" +
    "\001\000\010\006\021\035\017\036\020\001\001\000\006" +
    "\006\021\036\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\027" +
    "\012\025\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\027" +
    "\013\222\001\001\000\002\001\001\000\052\004\060\005" +
    "\074\006\046\007\037\014\057\015\063\016\065\017\073" +
    "\020\042\021\036\022\034\023\050\024\041\025\047\026" +
    "\052\031\075\032\064\033\070\034\056\037\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\172\011\171\020\167\001\001\000\002" +
    "\001\001\000\052\004\165\005\074\006\046\007\037\014" +
    "\057\015\063\016\065\017\073\020\042\021\036\022\034" +
    "\023\050\024\041\025\047\026\052\031\075\032\064\033" +
    "\070\034\056\037\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\037\014\150\015" +
    "\063\016\065\017\073\020\042\021\036\022\034\024\041" +
    "\037\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\005\111\006\046\007\037" +
    "\014\057\015\063\016\065\017\073\020\042\021\036\022" +
    "\034\023\107\024\041\025\047\026\052\027\105\030\106" +
    "\031\075\032\064\033\070\034\056\037\043\001\001\000" +
    "\002\001\001\000\026\007\037\014\077\015\063\016\065" +
    "\017\073\020\042\021\036\022\034\024\041\037\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\004\076" +
    "\005\074\006\046\007\037\014\057\015\063\016\065\017" +
    "\073\020\042\021\036\022\034\023\050\024\041\025\047" +
    "\026\052\031\075\032\064\033\070\034\056\037\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\005\111\006\046\007\037\014\057\015\063\016\065\017" +
    "\073\020\042\021\036\022\034\023\107\024\041\025\047" +
    "\026\052\027\112\030\106\031\075\032\064\033\070\034" +
    "\056\037\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\037\014\115\015\063\016\065\017\073\020\042" +
    "\021\036\022\034\024\041\037\043\001\001\000\002\001" +
    "\001\000\044\007\037\014\057\015\063\016\065\017\073" +
    "\020\042\021\036\022\034\023\117\024\041\025\047\026" +
    "\052\031\075\032\064\033\070\034\056\037\043\001\001" +
    "\000\002\001\001\000\010\007\122\017\073\024\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\037\015\135\016\065\017\073\024\041\001" +
    "\001\000\012\007\037\016\134\017\073\024\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\037\014\156\015\063\016\065\017\073\020\042\021\036" +
    "\022\034\024\041\037\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\037\014\160" +
    "\015\063\016\065\017\073\020\042\021\036\022\034\024" +
    "\041\037\043\001\001\000\002\001\001\000\044\007\037" +
    "\014\057\015\063\016\065\017\073\020\042\021\036\022" +
    "\034\023\162\024\041\025\047\026\052\031\075\032\064" +
    "\033\070\034\056\037\043\001\001\000\002\001\001\000" +
    "\044\007\037\014\057\015\063\016\065\017\073\020\042" +
    "\021\036\022\034\023\164\024\041\025\047\026\052\031" +
    "\075\032\064\033\070\034\056\037\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\175\011\171\020\167\001" +
    "\001\000\002\001\001\000\006\005\177\006\046\001\001" +
    "\000\016\007\037\015\200\016\065\017\073\022\201\024" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\007\037\014\057\015\063\016\065\017\073\020\042" +
    "\021\036\022\034\023\206\024\041\025\047\026\052\031" +
    "\075\032\064\033\070\034\056\037\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\037\015\211\016" +
    "\065\017\073\021\213\022\212\024\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\027\012\233\013\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\027\012\240\013\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\004\243\005\074\006" +
    "\046\007\037\014\057\015\063\016\065\017\073\020\042" +
    "\021\036\022\034\023\050\024\041\025\047\026\052\031" +
    "\075\032\064\033\070\034\056\037\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static int num_erroresSintactico = 0;
        public static Nodo padre;
        public static int cont_Nodos = 0;

        public void syntax_error(Symbol s){
                num_erroresSintactico ++;
                System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
                System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= listaPrototipos inicioprograma subprogramas 
            {
              Object RESULT =null;
		int lProtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lProtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lProt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int inicProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inicProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA CON SUBPROGRAMAS");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;

        nodo.addHijos((Nodo)lProt);
        nodo.addHijos((Nodo) inicProg);
        nodo.addHijos((Nodo) subProg);

        parser.padre = nodo;
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;
		int inicProgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int inicProgright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object inicProg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Nodo nodo = new Nodo();
        nodo.setEtiqueta("INICIO PROGRAMA SOLO MAIN");
        nodo.setID(parser.cont_Nodos);
        parser.cont_Nodos++;
        nodo.addHijos((Nodo) inicProg);

        parser.padre = nodo;
        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;
		int lparametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lparametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lparametros = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerpoPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cuerpoP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   Nodo nodo = new Nodo();
                   nodo.setEtiqueta("MAIN");
                   nodo.setID(parser.cont_Nodos);
                   parser.cont_Nodos++;

                   nodo.addHijos((Nodo)lparametros);
                   nodo.addHijos((Nodo)cuerpoP);
                   RESULT= nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicioprograma ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // inicioprograma ::= error DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicioprograma ::= error LPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicioprograma ::= error RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicioprograma ::= error COMMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;
		int listaPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object listaP = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           Nodo nodo = new Nodo();
                           nodo.setEtiqueta("LISTA DE PARAMETROS");
                           nodo.setID(parser.cont_Nodos);
                           parser.cont_Nodos++;

                           nodo.addHijos((Nodo) listaP);
                           nodo.addHijos((Nodo)param);
                           RESULT = nodo;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaParametros ::= parametro 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           RESULT = (Nodo)param;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("PAREMETRO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;

                        //terminal ID
                        Nodo identificador = new Nodo();
                        identificador.setEtiqueta("ID");
                        identificador.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        identificador.setValor(id);
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)identificador);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametro ::= 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("VOID");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("CHAR");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // especificadorTipo ::= INT 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor("INT");

                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;
		int pointerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pointerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pointer = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("TIPO");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.setValor(pointer);
                        RESULT = nodo;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoPrograma ::= declaracion cuerpoPrograma 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LINEA PROGRAMA");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
                        nodo.addHijos((Nodo)decl);
                        nodo.addHijos((Nodo)cp);
                        RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpoPrograma ::= stmnt cuerpoPrograma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LINEA PROGRAMA");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
                        nodo.addHijos((Nodo)s);
                        nodo.addHijos((Nodo)cp);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpoPrograma ::= 
            {
              Object RESULT =null;
		
                        Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("DECLARACION VARIABLE");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.addHijos((Nodo)tipo);
                        nodo.addHijos((Nodo)var);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("INICIALIZACION VARIABLE");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        nodo.addHijos((Nodo)li);
                        RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionVar ::= exprAsignacion 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo) ea;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionVar ::= exprAsignacion COMMA declaracionVar 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INICIALIZACION VARIABLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                nodo.addHijos((Nodo)ea);
                nodo.addHijos((Nodo)dv);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            identificador.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            identificador.setValor(id);
                            RESULT = identificador;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Nodo nodo = new Nodo();
                            nodo.setEtiqueta("LISTA IDENTIFICADORES");
                            nodo.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;

                            //terminal ID
                            Nodo identificador = new Nodo();
                            identificador.setEtiqueta("ID");
                            identificador.setID(parser.cont_Nodos);
                            parser.cont_Nodos++;
                            identificador.setValor(id);
                            
                            nodo.addHijos((Nodo)ld);
                            nodo.addHijos(identificador);
                            RESULT = nodo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = (Nodo)sc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)sc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)ss;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)si;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)se;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;
		int ssoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sso = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)sso;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;
		
                 Nodo nodo = new Nodo();
			nodo.setEtiqueta("VACIO");
			nodo.setID(parser.cont_Nodos);
			parser.cont_Nodos++;
			RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO PRINTF 1 ARG");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL PRINT
                Nodo printf = new Nodo();
                printf.setEtiqueta("PRINTF");
                printf.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                cadena.setValor(cs);

                nodo.addHijos(printf);
                nodo.addHijos(cadena);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO PRINTF 2ARG ");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL PRINT
                Nodo printf = new Nodo();
                printf.setEtiqueta("PRINTF");
                printf.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("CONST STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //cadena.setValor(cs);

                nodo.addHijos(printf);
                nodo.addHijos(cadena);
                nodo.addHijos((Nodo)li);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String av = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("COMANDO SCANF");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL SCANF
                Nodo a = new Nodo();
                a.setEtiqueta("SCANF");
                a.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                
                //TERIMNAL CONSTSTRING
                Nodo cadena = new Nodo();
                cadena.setEtiqueta("CONST STRING");
                cadena.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //cadena.setValor(c);

                //TERMINAL REFERENCIA
                Nodo referencia = new Nodo();
                referencia.setEtiqueta("VALOR DE REFERENCIA");
                referencia.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //referencia.setValor(av);

                nodo.addHijos(a);
                nodo.addHijos(cadena);
                nodo.addHijos(referencia);

                //nodo.addHijos(cadena);
                //nodo.addHijos(referencia);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT COMPUESTO");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)lb);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT COMPUESTO VACIO");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA BLOQUES");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)b);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA BLOQUES");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)b);
                nodo.addHijos((Nodo)lb);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // itemBloque ::= stmnt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ITEM DE BLOQUE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)s);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // itemBloque ::= declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ITEM DE BLOQUE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)d);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT SELECCION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL IF
                Nodo _if = new Nodo();
                _if.setEtiqueta("IF");
                _if.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(_if);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT SELECCION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL IF
                Nodo _if = new Nodo();
                _if.setEtiqueta("IF");
                _if.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL ELSE
                Nodo _else = new Nodo();
                _else.setEtiqueta("ELSE");
                _else.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(_if);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s1);
                nodo.addHijos(_else);
                nodo.addHijos((Nodo)s2);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmntIteracion ::= WHILE LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT ITERACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL WHILE
                Nodo mientras = new Nodo();
                mientras.setEtiqueta("CICLO WHILE");
                mientras.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(mientras);
                nodo.addHijos((Nodo)e);
                nodo.addHijos((Nodo)s);

                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmntIteracion ::= FOR LPAR declaracion exprRelacional PUNTOCOMA exprIncrementos RPAR stmnt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CICLO FOR");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //TERMINAL FOR
                Nodo _for = new Nodo();
                _for.setEtiqueta("FOR");
                _for.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)_for);
                nodo.addHijos((Nodo)d);
                nodo.addHijos((Nodo)er);
                nodo.addHijos((Nodo)ei);
                nodo.addHijos((Nodo)s);
                
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmntIteracion ::= error OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		
                //Terminal BREAK
                Nodo quebrar = new Nodo();
                quebrar.setEtiqueta("BREAK");
                quebrar.setID(parser.cont_Nodos);
                parser.cont_Nodos++;;
                RESULT = quebrar;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmntSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT RETURN VALOR");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                 //Terminal RETURN
                Nodo retornar = new Nodo();
                retornar.setEtiqueta("RETURN");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(retornar);
                nodo.addHijos((Nodo)e);

                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;
		

                //Terminal RETURN
                Nodo retornar = new Nodo();
                retornar.setEtiqueta("RETURN");
                retornar.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                RESULT = retornar;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STATEMENT EXPRESION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)e);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= exprSimple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)es;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= exprRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)er;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= condicion OPLOGIC condicion 
            {
              Object RESULT =null;
		int cond1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cond1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cond1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cond2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cond2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cond2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION LOGICA");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                Nodo logico = new Nodo();
                logico.setEtiqueta("OPERADOR LOGICO");
                logico.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                logico.setValor(op);

                nodo.addHijos((Nodo)cond1);
                nodo.addHijos((Nodo)logico);
                nodo.addHijos((Nodo)cond2);

                RESULT = nodo;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)ea;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= exprIncrementos PUNTOCOMA 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                
                RESULT = (Nodo)ei;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= error OPLOGIC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprIncrementos ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION AUTO OPSUMA");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal AUTOINCREMENTOS
                Nodo auto = new Nodo();
                auto.setEtiqueta("AUTO OPSUM");
                auto.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                auto.setValor(ai);

                nodo.addHijos(identificador);
                nodo.addHijos(auto);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprIncrementos",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION ASIGNACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal ASIGNACION
                Nodo asignacion = new Nodo();
                asignacion.setEtiqueta("ASIGNACION");
                asignacion.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos(identificador);
                nodo.addHijos(asignacion);
                nodo.addHijos((Nodo)e);

                RESULT = nodo; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String av = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION ASIGNACION");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);

                //Terminal ASIGNACION
                Nodo asignacion = new Nodo();
                asignacion.setEtiqueta("ASIGNACION");
                asignacion.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                //asignacion.setValor(asig);

                //Terminal APUNTADORVAR
                Nodo referencia = new Nodo();
                referencia.setEtiqueta("VALOR DE REFERENCIA");
                referencia.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                referencia.setValor(av);

                nodo.addHijos(identificador);
                nodo.addHijos(asignacion);
                nodo.addHijos(referencia);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= exprSimple 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                RESULT = (Nodo)es;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // condicion ::= exprRelacional 
            {
              Object RESULT =null;
		int exprRelleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprRelright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exprRel = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                RESULT = (Nodo)exprRel;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // condicion ::= error ASIGNACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // condicion ::= error OPREL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprRelacional ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION RELACIONAL");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                Nodo relacional = new Nodo();
                relacional.setEtiqueta("OPREL");
                relacional.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                relacional.setValor(opr);

                nodo.addHijos((Nodo)es1);
                nodo.addHijos(relacional);
                nodo.addHijos((Nodo)es2);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprSimple ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION SIMPLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                nodo.addHijos((Nodo)t);
                RESULT = nodo;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprSimple ::= exprSimple OPSUM termino 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("EXPRESION SIMPLE");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal OPSUM
                Nodo suma = new Nodo();
                suma.setEtiqueta("OPSUM");
                suma.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                suma.setValor(sum);

                nodo.addHijos((Nodo)es);
                nodo.addHijos(suma);
                nodo.addHijos((Nodo)t);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino ::= operando 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("TERMINO");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;

                    nodo.addHijos((Nodo)op);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino ::= termino OPMULT operando 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opm = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("TERMINO");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;

                    Nodo mult = new Nodo();
                    mult.setEtiqueta("OPMULT");
                    mult.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    mult.setValor(opm);

                    nodo.addHijos((Nodo)t);
                    nodo.addHijos(mult);
                    nodo.addHijos((Nodo)op);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operando ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);

                    RESULT = identificador;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operando ::= constante 
            {
              Object RESULT =null;
		int _constleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _constright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _const = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Nodo)_const;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operando ::= LPAR expresion RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = (Nodo)e;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operando ::= llamadoFunc 
            {
              Object RESULT =null;
		int lfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = (Nodo)lf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constante ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Nodo entero = new Nodo();
                    entero.setEtiqueta("INT");
                    entero.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    entero.setValor(i);
                    RESULT = entero;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //terminal CHAR
                    Nodo caracter = new Nodo();
                    caracter.setEtiqueta("CHAR");
                    caracter.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    caracter.setValor(c);
                    RESULT = caracter;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadoFunc ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("LLAMADA A FUNCION");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);
                    nodo.addHijos(identificador);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamadoFunc ::= ID LPAR listaIdentificadores RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("LLAMADA A FUNCION");
                    nodo.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    
                    //Terminal ID
                    Nodo identificador = new Nodo();
                    identificador.setEtiqueta("ID");
                    identificador.setID(parser.cont_Nodos);
                    parser.cont_Nodos++;
                    identificador.setValor(id);
                    
                    nodo.addHijos(identificador);
                    nodo.addHijos((Nodo)li);
                    RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // subprogramas ::= subprogramas subprograma 
            {
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object subp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("LISTA SUBPROGRAMAS");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;

                        nodo.addHijos((Nodo)sp);
                        nodo.addHijos((Nodo)subp);
                        RESULT = nodo;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // subprogramas ::= subprograma 
            {
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)sp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // subprograma ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        Nodo nodo = new Nodo();
                        nodo.setEtiqueta("Subprograma");
                        nodo.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                
                        //Terminal ID
                        Nodo identificador = new Nodo();
                        identificador.setEtiqueta("ID");
                        identificador.setID(parser.cont_Nodos);
                        parser.cont_Nodos++;
                        identificador.setValor(id);

                        nodo.addHijos((Nodo)et);
                        nodo.addHijos(identificador);
                        nodo.addHijos((Nodo)lp);
                        nodo.addHijos((Nodo)Cp);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prototipoFunc ::= especificadorTipo ID LPAR listaParametros RPAR PUNTOCOMA 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object et = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("Prototipo de Funcion");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;

                //Terminal ID
                Nodo identificador = new Nodo();
                identificador.setEtiqueta("ID");
                identificador.setID(parser.cont_Nodos);
                parser.cont_Nodos++;
                identificador.setValor(id);
                    
                nodo.addHijos((Nodo)et);
                nodo.addHijos(identificador);
                nodo.addHijos((Nodo)lp);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prototipoFunc",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listaPrototipos ::= listaPrototipos prototipoFunc 
            {
              Object RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("LISTA PROTOTIPOS");
                nodo.setID(parser.cont_Nodos);
                parser.cont_Nodos++;


                nodo.addHijos((Nodo)lp);
                nodo.addHijos((Nodo)pf);
                RESULT = nodo;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaPrototipos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaPrototipos ::= prototipoFunc 
            {
              Object RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = (Nodo)pf;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaPrototipos",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

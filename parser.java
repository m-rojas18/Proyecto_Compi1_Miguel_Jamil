
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\002\000\002\005\006\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\005\000\002\013\005\000\002\013" +
    "\003\000\002\012\011\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\002\000\002\017\004\000" +
    "\002\017\006\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\005" +
    "\000\002\024\004\000\002\024\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\003\000\002\025\003\000\002" +
    "\025\003\000\002\022\005\000\002\022\003\000\002\023" +
    "\005\000\002\026\005\000\002\026\005\000\002\027\004" +
    "\000\002\030\005\000\002\030\005\000\002\037\011\000" +
    "\002\031\006\000\002\031\010\000\002\031\010\000\002" +
    "\032\003\000\002\032\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\005\000\002\034\004\000\002\035\003\000" +
    "\002\035\004\000\002\036\003\000\002\036\003\000\002" +
    "\041\007\000\002\041\011\000\002\042\007\000\002\042" +
    "\013\000\002\042\014\000\002\043\004\000\002\043\005" +
    "\000\002\043\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\016\006\001\002\000\004\002\224\001" +
    "\002\000\004\002\000\001\002\000\004\010\007\001\002" +
    "\000\004\037\010\001\002\000\004\040\011\001\002\000" +
    "\004\041\012\001\002\000\044\004\031\006\047\007\026" +
    "\011\040\012\034\013\041\014\043\015\013\016\023\017" +
    "\014\020\036\030\020\032\053\033\033\037\052\041\051" +
    "\042\ufffa\001\002\000\004\037\217\001\002\000\004\033" +
    "\ufff7\001\002\000\006\035\215\042\ufffc\001\002\000\010" +
    "\036\uffe6\040\uffe6\043\uffe6\001\002\000\020\025\uffe3\026" +
    "\uffe3\027\uffe3\033\120\036\uffe3\040\uffe3\043\uffe3\001\002" +
    "\000\024\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc\033" +
    "\uffdc\036\uffdc\040\uffdc\043\uffdc\001\002\000\010\036\uffe4" +
    "\040\uffe4\043\uffe4\001\002\000\024\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\035\uffcc\041\uffcc\042\uffcc" +
    "\001\002\000\004\033\ufff6\001\002\000\006\035\212\042" +
    "\ufffd\001\002\000\012\021\210\036\uffe8\040\uffe8\043\uffe8" +
    "\001\002\000\004\037\170\001\002\000\002\001\002\000" +
    "\014\021\uffd9\022\145\036\uffd9\040\uffd9\043\uffd9\001\002" +
    "\000\004\037\137\001\002\000\024\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\011\uffca\012\uffca\035\uffca\041\uffca\042\uffca" +
    "\001\002\000\006\023\134\024\133\001\002\000\014\030" +
    "\020\032\053\033\033\036\131\037\052\001\002\000\004" +
    "\036\127\001\002\000\004\033\ufff5\001\002\000\004\042" +
    "\126\001\002\000\004\036\125\001\002\000\004\033\ufff8" +
    "\001\002\000\024\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\035\uffc9\041\uffc9\042\uffc9\001\002\000\004" +
    "\037\113\001\002\000\004\042\ufffe\001\002\000\016\025" +
    "\102\026\103\027\104\036\uffea\040\uffea\043\uffea\001\002" +
    "\000\024\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012" +
    "\uffcb\035\uffcb\041\uffcb\042\uffcb\001\002\000\004\037\076" +
    "\001\002\000\024\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011" +
    "\uffc8\012\uffc8\035\uffc8\041\uffc8\042\uffc8\001\002\000\020" +
    "\004\031\006\047\007\026\011\040\012\034\041\051\042" +
    "\067\001\002\000\012\030\020\032\053\033\033\037\052" +
    "\001\002\000\024\021\uffdb\022\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\033\uffdb\036\uffdb\040\uffdb\043\uffdb\001\002\000\004" +
    "\042\ufffb\001\002\000\010\036\uffe9\040\uffe9\043\uffe9\001" +
    "\002\000\010\036\uffe5\040\uffe5\043\uffe5\001\002\000\024" +
    "\021\uffe0\022\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\036" +
    "\uffe0\040\uffe0\043\uffe0\001\002\000\006\035\uffce\042\uffce" +
    "\001\002\000\004\040\062\001\002\000\020\025\uffe2\026" +
    "\uffe2\027\uffe2\036\uffe2\040\uffe2\043\uffe2\044\063\001\002" +
    "\000\012\030\020\032\053\033\033\037\052\001\002\000" +
    "\004\043\065\001\002\000\012\030\020\032\053\033\033" +
    "\037\052\001\002\000\010\036\uffd2\040\uffd2\043\uffd2\001" +
    "\002\000\024\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
    "\012\uffc6\035\uffc6\041\uffc6\042\uffc6\001\002\000\020\004" +
    "\031\006\047\007\026\011\040\012\034\041\051\042\074" +
    "\001\002\000\020\004\uffc2\006\uffc2\007\uffc2\011\uffc2\012" +
    "\uffc2\041\uffc2\042\uffc2\001\002\000\020\004\uffc5\006\uffc5" +
    "\007\uffc5\011\uffc5\012\uffc5\041\uffc5\042\uffc5\001\002\000" +
    "\020\004\uffc3\006\uffc3\007\uffc3\011\uffc3\012\uffc3\041\uffc3" +
    "\042\uffc3\001\002\000\024\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\035\uffc7\041\uffc7\042\uffc7\001\002" +
    "\000\020\004\uffc4\006\uffc4\007\uffc4\011\uffc4\012\uffc4\041" +
    "\uffc4\042\uffc4\001\002\000\012\030\020\032\053\033\033" +
    "\037\052\001\002\000\004\040\100\001\002\000\016\004" +
    "\031\006\047\007\026\011\040\012\034\041\051\001\002" +
    "\000\024\004\uffbf\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\035\uffbf\041\uffbf\042\uffbf\001\002\000\010\030\020" +
    "\032\053\037\106\001\002\000\010\030\020\032\053\037" +
    "\106\001\002\000\010\030\020\032\053\037\106\001\002" +
    "\000\010\036\uffd3\040\uffd3\043\uffd3\001\002\000\012\030" +
    "\020\032\053\033\033\037\052\001\002\000\004\040\110" +
    "\001\002\000\010\036\uffe2\040\uffe2\043\uffe2\001\002\000" +
    "\010\036\uffd4\040\uffd4\043\uffd4\001\002\000\010\036\uffe7" +
    "\040\uffe7\043\uffe7\001\002\000\004\031\114\001\002\000" +
    "\006\035\115\040\116\001\002\000\006\030\020\032\053" +
    "\001\002\000\004\042\uffd1\001\002\000\006\033\120\040" +
    "\122\001\002\000\026\021\ufff2\022\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\033\ufff2\035\ufff2\036\ufff2\040\ufff2\043\ufff2\001" +
    "\002\000\026\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\033\uffe1\035\123\036\uffe1\040\uffe1\043\uffe1\001\002\000" +
    "\004\042\uffd0\001\002\000\004\033\124\001\002\000\026" +
    "\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\033\ufff3\035" +
    "\ufff3\036\ufff3\040\ufff3\043\ufff3\001\002\000\024\004\uffbc" +
    "\005\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\035\uffbc\041" +
    "\uffbc\042\uffbc\001\002\000\004\002\uffff\001\002\000\006" +
    "\035\uffec\042\uffec\001\002\000\004\036\132\001\002\000" +
    "\024\004\uffba\005\uffba\006\uffba\007\uffba\011\uffba\012\uffba" +
    "\035\uffba\041\uffba\042\uffba\001\002\000\024\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\011\uffbb\012\uffbb\035\uffbb\041\uffbb" +
    "\042\uffbb\001\002\000\014\030\020\032\053\033\033\034" +
    "\135\037\052\001\002\000\010\036\uffd5\040\uffd5\043\uffd5" +
    "\001\002\000\010\036\uffd6\040\uffd6\043\uffd6\001\002\000" +
    "\010\036\uffd7\040\uffd7\043\uffd7\001\002\000\012\030\020" +
    "\032\053\033\033\037\052\001\002\000\004\040\141\001" +
    "\002\000\016\004\031\006\047\007\026\011\040\012\034" +
    "\041\051\001\002\000\024\004\uffc1\005\143\006\uffc1\007" +
    "\uffc1\011\uffc1\012\uffc1\035\uffc1\041\uffc1\042\uffc1\001\002" +
    "\000\016\004\031\006\047\007\026\011\040\012\034\041" +
    "\051\001\002\000\024\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\011\uffc0\012\uffc0\035\uffc0\041\uffc0\042\uffc0\001\002\000" +
    "\006\030\020\032\053\001\002\000\016\021\uffd8\022\uffd8" +
    "\033\120\036\uffd8\040\uffd8\043\uffd8\001\002\000\004\033" +
    "\150\001\002\000\010\035\ufff2\036\ufff2\037\155\001\002" +
    "\000\006\035\123\036\154\001\002\000\002\001\002\000" +
    "\004\042\ufff9\001\002\000\004\033\ufff4\001\002\000\016" +
    "\013\041\016\023\017\014\020\036\035\uffed\040\uffed\001" +
    "\002\000\006\035\162\040\163\001\002\000\006\035\uffef" +
    "\040\uffef\001\002\000\004\033\161\001\002\000\006\035" +
    "\uffee\040\uffee\001\002\000\016\013\041\016\023\017\014" +
    "\020\036\035\uffed\040\uffed\001\002\000\004\041\164\001" +
    "\002\000\044\004\031\006\047\007\026\011\040\012\034" +
    "\013\041\014\043\015\013\016\023\017\014\020\036\030" +
    "\020\032\053\033\033\037\052\041\051\042\ufffa\001\002" +
    "\000\004\042\166\001\002\000\002\001\002\000\006\035" +
    "\ufff0\040\ufff0\001\002\000\012\030\020\032\053\033\033" +
    "\037\052\001\002\000\004\036\202\001\002\000\012\030" +
    "\020\032\053\033\033\037\052\001\002\000\004\036\174" +
    "\001\002\000\012\030\020\032\053\033\033\037\052\001" +
    "\002\000\004\036\176\001\002\000\012\030\020\032\053" +
    "\033\033\037\052\001\002\000\004\040\200\001\002\000" +
    "\016\004\031\006\047\007\026\011\040\012\034\041\051" +
    "\001\002\000\024\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011" +
    "\uffbd\012\uffbd\035\uffbd\041\uffbd\042\uffbd\001\002\000\012" +
    "\030\020\032\053\033\033\037\052\001\002\000\004\036" +
    "\204\001\002\000\012\030\020\032\053\033\033\037\052" +
    "\001\002\000\004\040\206\001\002\000\016\004\031\006" +
    "\047\007\026\011\040\012\034\041\051\001\002\000\024" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\011\uffbe\012\uffbe\035" +
    "\uffbe\041\uffbe\042\uffbe\001\002\000\002\001\002\000\014" +
    "\021\uffda\022\145\036\uffda\040\uffda\043\uffda\001\002\000" +
    "\012\030\020\032\053\033\033\037\052\001\002\000\004" +
    "\036\214\001\002\000\006\035\uffeb\042\uffeb\001\002\000" +
    "\016\004\031\006\047\007\026\011\040\012\034\041\051" +
    "\001\002\000\006\035\uffcd\042\uffcd\001\002\000\004\031" +
    "\220\001\002\000\004\035\221\001\002\000\004\034\222" +
    "\001\002\000\004\040\223\001\002\000\004\042\uffcf\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\036\005" +
    "\043\007\026\017\023\020\034\021\044\022\024\023\027" +
    "\024\016\025\056\026\020\027\054\030\015\031\053\032" +
    "\014\033\057\034\021\037\055\040\045\041\031\042\041" +
    "\043\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\127\021\044\022\024\023\027\024\016\025\056\026" +
    "\020\027\054\030\015\037\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\072\033\070\034\021" +
    "\035\067\036\071\040\045\041\031\042\041\043\047\001" +
    "\001\000\026\020\060\021\044\022\024\023\027\024\016" +
    "\025\056\026\020\027\054\030\015\037\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\020\063\021\044\022\024" +
    "\023\027\024\016\025\056\026\020\027\054\030\015\037" +
    "\055\001\001\000\002\001\001\000\026\020\065\021\044" +
    "\022\024\023\027\024\016\025\056\026\020\027\054\030" +
    "\015\037\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\006\072\033\070\034\021\036\074\040\045\041" +
    "\031\042\041\043\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\076\021\044\022\024\023\027\024\016" +
    "\025\056\026\020\027\054\030\015\037\055\001\001\000" +
    "\002\001\001\000\016\033\100\034\021\040\045\041\031" +
    "\042\041\043\047\001\001\000\002\001\001\000\010\021" +
    "\111\024\016\025\056\001\001\000\010\021\110\024\016" +
    "\025\056\001\001\000\010\021\104\024\016\025\056\001" +
    "\001\000\002\001\001\000\026\020\106\021\044\022\024" +
    "\023\027\024\016\025\056\026\020\027\054\030\015\037" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\116\025\056\001\001\000\002\001\001" +
    "\000\004\013\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\020\135\021\044\022\024\023\027\024\016\025\056\026" +
    "\020\027\054\030\015\037\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\020\137\021" +
    "\044\022\024\023\027\024\016\025\056\026\020\027\054" +
    "\030\015\037\055\001\001\000\002\001\001\000\016\033" +
    "\141\034\021\040\045\041\031\042\041\043\047\001\001" +
    "\000\002\001\001\000\016\033\143\034\021\040\045\041" +
    "\031\042\041\043\047\001\001\000\002\001\001\000\006" +
    "\024\145\025\056\001\001\000\004\013\120\001\001\000" +
    "\006\012\151\013\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\157\014\155\015\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\157\015\166\001\001\000\002" +
    "\001\001\000\056\004\164\005\043\007\026\017\023\020" +
    "\034\021\044\022\024\023\027\024\016\025\056\026\020" +
    "\027\054\030\015\031\053\032\014\033\057\034\021\037" +
    "\055\040\045\041\031\042\041\043\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\171\020\170\021\044\022\024\023\027\024\016\025\056" +
    "\026\020\027\054\030\015\037\055\001\001\000\002\001" +
    "\001\000\026\020\172\021\044\022\024\023\027\024\016" +
    "\025\056\026\020\027\054\030\015\037\055\001\001\000" +
    "\002\001\001\000\026\020\174\021\044\022\024\023\027" +
    "\024\016\025\056\026\020\027\054\030\015\037\055\001" +
    "\001\000\002\001\001\000\026\020\176\021\044\022\024" +
    "\023\027\024\016\025\056\026\020\027\054\030\015\037" +
    "\055\001\001\000\002\001\001\000\016\033\200\034\021" +
    "\040\045\041\031\042\041\043\047\001\001\000\002\001" +
    "\001\000\026\020\202\021\044\022\024\023\027\024\016" +
    "\025\056\026\020\027\054\030\015\037\055\001\001\000" +
    "\002\001\001\000\026\020\204\021\044\022\024\023\027" +
    "\024\016\025\056\026\020\027\054\030\015\037\055\001" +
    "\001\000\002\001\001\000\016\033\206\034\021\040\045" +
    "\041\031\042\041\043\047\001\001\000\002\001\001\000" +
    "\004\023\210\001\001\000\002\001\001\000\026\020\212" +
    "\021\044\022\024\023\027\024\016\025\056\026\020\027" +
    "\054\030\015\037\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\033\215\034\021\040\045\041\031\042" +
    "\041\043\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma 
            {
              Object RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Hola inicio Programa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicioprograma ::= INT MAIN LPAR RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpoPrograma ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpoPrograma ::= expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpoPrograma ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpoPrograma ::= comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= especificadorTipo declaracionVar declaracionFunc declaracionVarAsig 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVar ::= declaracionVar listaIdentificadores PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionFunc ::= ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFunc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresiones ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresiones ::= expresiones COMMA expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= exprAutoSUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= exprAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= exprBooleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= exprCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprSimple ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprSimple ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operando ::= operando listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // argumentos ::= listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // argumentos ::= COMMA constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // argumentos ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprAritmetica ::= exprAritmetica OPSUM exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprAritmetica ::= exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprMult ::= exprMult OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprMult",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exprAutoSUM ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAutoSUM",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exprBooleana ::= exprSimple AND exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprBooleana ::= exprSimple OR exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comandos ::= PRINTF LPAR CONSTSTRING COMMA operando RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statements ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statements ::= statements COMMA stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= stmtCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= stmtExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= stmtSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= stmtIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= stmtSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtCompuesto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtCompuesto",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaBloques ::= listaBloques itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // itemBloque ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // itemBloque ::= stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtSeleccion ::= IF LPAR expresion RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtSeleccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtSeleccion ::= IF LPAR expresion RPAR stmt ELSE stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtSeleccion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtIteracion ::= WHILE LPAR expresion RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtIteracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtIteracion ::= FOR LPAR expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtIteracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtIteracion ::= FOR LPAR declaracion expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR stmt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtIteracion",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtSalto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtSalto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtSalto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

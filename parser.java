
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\002\000\002\005\003\000\002\005\005\000" +
    "\002\006\005\000\002\006\011\000\002\010\005\000\002" +
    "\010\003\000\002\011\004\000\002\011\002\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\014\004\000\002\014\006\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\017\005" +
    "\000\002\017\003\000\002\021\003\000\002\021\003\000" +
    "\002\020\005\000\002\022\003\000\002\022\003\000\002" +
    "\023\005\000\002\023\005\000\002\024\004\000\002\025" +
    "\005\000\002\025\005\000\002\035\011\000\002\026\006" +
    "\000\002\026\003\000\002\027\006\000\002\027\010\000" +
    "\002\027\010\000\002\030\003\000\002\030\005\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\005\000\002\032\004" +
    "\000\002\033\003\000\002\033\004\000\002\034\003\000" +
    "\002\034\003\000\002\037\007\000\002\037\011\000\002" +
    "\040\007\000\002\040\013\000\002\040\014\000\002\041" +
    "\004\000\002\041\005\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\016\006\001\002\000\004\002\224\001" +
    "\002\000\004\002\000\001\002\000\004\010\007\001\002" +
    "\000\004\037\010\001\002\000\004\040\011\001\002\000" +
    "\004\041\012\001\002\000\044\004\033\006\052\007\027" +
    "\011\044\012\036\013\045\014\047\015\014\016\023\017" +
    "\015\020\042\030\021\032\056\033\034\037\054\041\053" +
    "\042\ufffb\001\002\000\034\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\011\uffce\012\uffce\013\uffce\016\uffce\017\uffce\020\uffce" +
    "\035\uffce\041\uffce\042\uffce\001\002\000\004\037\217\001" +
    "\002\000\004\033\ufff1\001\002\000\034\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\016\uffca\017" +
    "\uffca\020\uffca\035\uffca\041\uffca\042\uffca\001\002\000\010" +
    "\036\uffe8\040\uffe8\043\uffe8\001\002\000\016\025\uffe5\026" +
    "\uffe5\027\uffe5\036\uffe5\040\uffe5\043\uffe5\001\002\000\022" +
    "\021\uffdd\022\uffdd\025\uffdd\026\uffdd\027\uffdd\036\uffdd\040" +
    "\uffdd\043\uffdd\001\002\000\010\036\uffe6\040\uffe6\043\uffe6" +
    "\001\002\000\004\033\ufff0\001\002\000\012\021\215\036" +
    "\uffea\040\uffea\043\uffea\001\002\000\016\025\uffe4\026\uffe4" +
    "\027\uffe4\036\uffe4\040\uffe4\043\uffe4\001\002\000\034\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\035\uffcc\041\uffcc\042\uffcc\001" +
    "\002\000\004\037\175\001\002\000\004\033\166\001\002" +
    "\000\034\004\uffcb\005\uffcb\006\uffcb\007\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\016\uffcb\017\uffcb\020\uffcb\035\uffcb\041\uffcb" +
    "\042\uffcb\001\002\000\014\021\uffe1\022\164\036\uffe1\040" +
    "\uffe1\043\uffe1\001\002\000\004\037\156\001\002\000\024" +
    "\023\153\024\152\025\uffe0\026\uffe0\027\uffe0\036\uffe0\037" +
    "\112\040\uffe0\043\uffe0\001\002\000\006\035\uffd0\042\uffd0" +
    "\001\002\000\020\014\047\015\014\030\021\032\056\033" +
    "\034\036\150\037\054\001\002\000\034\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\035\uffcd\041\uffcd\042\uffcd\001\002\000\006" +
    "\035\145\042\ufffe\001\002\000\004\036\144\001\002\000" +
    "\004\033\uffef\001\002\000\004\042\143\001\002\000\004" +
    "\036\142\001\002\000\004\033\ufff2\001\002\000\006\035" +
    "\140\042\ufffd\001\002\000\004\037\131\001\002\000\006" +
    "\035\126\042\ufffc\001\002\000\016\025\104\026\105\027" +
    "\106\036\uffec\040\uffec\043\uffec\001\002\000\004\037\100" +
    "\001\002\000\030\004\033\006\052\007\027\011\044\012" +
    "\036\013\045\016\023\017\015\020\042\041\053\042\075" +
    "\001\002\000\016\014\047\015\014\030\021\032\056\033" +
    "\034\037\054\001\002\000\016\025\uffd4\026\uffd4\027\uffd4" +
    "\036\uffd4\040\uffd4\043\uffd4\001\002\000\022\021\uffdc\022" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\036\uffdc\040\uffdc\043\uffdc" +
    "\001\002\000\010\036\uffeb\040\uffeb\043\uffeb\001\002\000" +
    "\010\036\uffe7\040\uffe7\043\uffe7\001\002\000\022\021\uffdf" +
    "\022\uffdf\025\uffdf\026\uffdf\027\uffdf\036\uffdf\040\uffdf\043" +
    "\uffdf\001\002\000\006\035\ufffa\042\ufffa\001\002\000\004" +
    "\040\064\001\002\000\020\025\uffe3\026\uffe3\027\uffe3\036" +
    "\uffe3\040\uffe3\043\uffe3\044\065\001\002\000\016\014\047" +
    "\015\014\030\021\032\056\033\034\037\054\001\002\000" +
    "\004\043\067\001\002\000\016\014\047\015\014\030\021" +
    "\032\056\033\034\037\054\001\002\000\010\036\uffd6\040" +
    "\uffd6\043\uffd6\001\002\000\030\004\uffc4\006\uffc4\007\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\016\uffc4\017\uffc4\020\uffc4\041" +
    "\uffc4\042\uffc4\001\002\000\030\004\uffc7\006\uffc7\007\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\016\uffc7\017\uffc7\020\uffc7\041" +
    "\uffc7\042\uffc7\001\002\000\030\004\uffc5\006\uffc5\007\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\016\uffc5\017\uffc5\020\uffc5\041" +
    "\uffc5\042\uffc5\001\002\000\030\004\033\006\052\007\027" +
    "\011\044\012\036\013\045\016\023\017\015\020\042\041" +
    "\053\042\077\001\002\000\034\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\011\uffc8\012\uffc8\013\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\035\uffc8\041\uffc8\042\uffc8\001\002\000\030\004\uffc6" +
    "\006\uffc6\007\uffc6\011\uffc6\012\uffc6\013\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\041\uffc6\042\uffc6\001\002\000\034\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\035\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\016\014\047\015\014\030\021\032\056\033\034\037" +
    "\054\001\002\000\004\040\102\001\002\000\016\004\033" +
    "\006\052\007\027\011\044\012\036\041\053\001\002\000" +
    "\034\004\uffc1\005\uffc1\006\uffc1\007\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\016\uffc1\017\uffc1\020\uffc1\035\uffc1\041\uffc1\042" +
    "\uffc1\001\002\000\016\014\047\015\014\030\021\032\056" +
    "\033\111\037\110\001\002\000\016\014\047\015\014\030" +
    "\021\032\056\033\111\037\110\001\002\000\016\014\047" +
    "\015\014\030\021\032\056\033\111\037\110\001\002\000" +
    "\010\036\uffd7\040\uffd7\043\uffd7\001\002\000\016\014\047" +
    "\015\014\030\021\032\056\033\034\037\054\001\002\000" +
    "\012\036\uffe0\037\112\040\uffe0\043\uffe0\001\002\000\016" +
    "\013\045\016\023\017\015\020\042\035\ufff3\040\ufff3\001" +
    "\002\000\006\035\117\040\120\001\002\000\006\035\ufff5" +
    "\040\ufff5\001\002\000\004\033\116\001\002\000\006\035" +
    "\ufff4\040\ufff4\001\002\000\016\013\045\016\023\017\015" +
    "\020\042\035\ufff3\040\ufff3\001\002\000\016\025\uffd5\026" +
    "\uffd5\027\uffd5\036\uffd5\040\uffd5\043\uffd5\001\002\000\006" +
    "\035\ufff6\040\ufff6\001\002\000\004\040\123\001\002\000" +
    "\010\036\uffe3\040\uffe3\043\uffe3\001\002\000\010\036\uffd8" +
    "\040\uffd8\043\uffd8\001\002\000\010\036\uffe9\040\uffe9\043" +
    "\uffe9\001\002\000\016\014\047\015\014\030\021\032\056" +
    "\033\034\037\054\001\002\000\004\036\130\001\002\000" +
    "\006\035\uffed\042\uffed\001\002\000\004\031\132\001\002" +
    "\000\006\035\133\040\134\001\002\000\010\030\021\032" +
    "\056\033\135\001\002\000\016\025\uffd3\026\uffd3\027\uffd3" +
    "\036\uffd3\040\uffd3\043\uffd3\001\002\000\014\021\uffe0\022" +
    "\uffe0\036\uffe0\040\uffe0\043\uffe0\001\002\000\004\040\137" +
    "\001\002\000\016\025\uffd2\026\uffd2\027\uffd2\036\uffd2\040" +
    "\uffd2\043\uffd2\001\002\000\016\004\033\006\052\007\027" +
    "\011\044\012\036\041\053\001\002\000\006\035\uffcf\042" +
    "\uffcf\001\002\000\034\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\016\uffbe\017\uffbe\020\uffbe\035" +
    "\uffbe\041\uffbe\042\uffbe\001\002\000\004\002\uffff\001\002" +
    "\000\006\035\uffee\042\uffee\001\002\000\012\013\045\016" +
    "\023\017\015\020\042\001\002\000\006\035\ufff9\042\ufff9" +
    "\001\002\000\004\036\151\001\002\000\034\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\011\uffbc\012\uffbc\013\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\035\uffbc\041\uffbc\042\uffbc\001\002\000" +
    "\034\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\016\uffbd\017\uffbd\020\uffbd\035\uffbd\041\uffbd\042" +
    "\uffbd\001\002\000\020\014\047\015\014\030\021\032\056" +
    "\033\034\034\155\037\054\001\002\000\010\036\uffd9\040" +
    "\uffd9\043\uffd9\001\002\000\010\036\uffdb\040\uffdb\043\uffdb" +
    "\001\002\000\010\036\uffda\040\uffda\043\uffda\001\002\000" +
    "\016\014\047\015\014\030\021\032\056\033\034\037\054" +
    "\001\002\000\004\040\160\001\002\000\016\004\033\006" +
    "\052\007\027\011\044\012\036\041\053\001\002\000\034" +
    "\004\uffc3\005\162\006\uffc3\007\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\035\uffc3\041\uffc3\042\uffc3" +
    "\001\002\000\016\004\033\006\052\007\027\011\044\012" +
    "\036\041\053\001\002\000\034\004\uffc2\005\uffc2\006\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\013\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\035\uffc2\041\uffc2\042\uffc2\001\002\000\010\030\021" +
    "\032\056\033\135\001\002\000\014\021\uffde\022\uffde\036" +
    "\uffde\040\uffde\043\uffde\001\002\000\006\036\170\037\167" +
    "\001\002\000\016\013\045\016\023\017\015\020\042\035" +
    "\ufff3\040\ufff3\001\002\000\046\004\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\030\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8" +
    "\041\ufff8\042\ufff8\001\002\000\006\035\117\040\172\001" +
    "\002\000\004\041\173\001\002\000\004\042\174\001\002" +
    "\000\046\004\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\030\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\037\ufff7\041\ufff7\042\ufff7\001" +
    "\002\000\026\013\045\014\047\015\014\016\023\017\015" +
    "\020\042\030\021\032\056\033\034\037\054\001\002\000" +
    "\004\036\207\001\002\000\016\014\047\015\014\030\021" +
    "\032\056\033\034\037\054\001\002\000\004\036\201\001" +
    "\002\000\016\014\047\015\014\030\021\032\056\033\034" +
    "\037\054\001\002\000\004\036\203\001\002\000\016\014" +
    "\047\015\014\030\021\032\056\033\034\037\054\001\002" +
    "\000\004\040\205\001\002\000\016\004\033\006\052\007" +
    "\027\011\044\012\036\041\053\001\002\000\034\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\011\uffbf\012\uffbf\013\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\035\uffbf\041\uffbf\042\uffbf\001\002" +
    "\000\016\014\047\015\014\030\021\032\056\033\034\037" +
    "\054\001\002\000\004\036\211\001\002\000\016\014\047" +
    "\015\014\030\021\032\056\033\034\037\054\001\002\000" +
    "\004\040\213\001\002\000\016\004\033\006\052\007\027" +
    "\011\044\012\036\041\053\001\002\000\034\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\035\uffc0\041\uffc0\042\uffc0\001\002\000" +
    "\002\001\002\000\014\021\uffe2\022\164\036\uffe2\040\uffe2" +
    "\043\uffe2\001\002\000\004\031\220\001\002\000\004\035" +
    "\221\001\002\000\004\034\222\001\002\000\004\040\223" +
    "\001\002\000\016\025\uffd1\026\uffd1\027\uffd1\036\uffd1\040" +
    "\uffd1\043\uffd1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\004\042\005" +
    "\037\006\061\012\027\014\047\015\040\016\050\017\023" +
    "\020\031\021\017\022\060\023\021\024\056\025\016\026" +
    "\024\027\054\030\045\031\034\032\012\035\057\036\036" +
    "\037\025\040\030\041\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\015\146\016\050\017" +
    "\023\020\031\021\017\022\060\023\021\024\056\025\016" +
    "\026\024\027\054\035\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\072\012\027\031\070\032" +
    "\012\033\073\034\071\036\036\037\025\040\030\041\015" +
    "\001\001\000\032\015\062\016\050\017\023\020\031\021" +
    "\017\022\060\023\021\024\056\025\016\026\024\027\054" +
    "\035\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\015" +
    "\065\016\050\017\023\020\031\021\017\022\060\023\021" +
    "\024\056\025\016\026\024\027\054\035\057\001\001\000" +
    "\002\001\001\000\032\015\067\016\050\017\023\020\031" +
    "\021\017\022\060\023\021\024\056\025\016\026\024\027" +
    "\054\035\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\072\012" +
    "\027\031\070\032\012\034\075\036\036\037\025\040\030" +
    "\041\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\015\100\016\050\017\023\020\031" +
    "\021\017\022\060\023\021\024\056\025\016\026\024\027" +
    "\054\035\057\001\001\000\002\001\001\000\016\031\102" +
    "\032\012\036\036\037\025\040\030\041\015\001\001\000" +
    "\002\001\001\000\014\016\124\021\017\022\060\026\024" +
    "\027\054\001\001\000\014\016\123\021\017\022\060\026" +
    "\024\027\054\001\001\000\014\016\106\021\017\022\060" +
    "\026\024\027\054\001\001\000\002\001\001\000\032\015" +
    "\121\016\050\017\023\020\031\021\017\022\060\023\021" +
    "\024\056\025\016\026\024\027\054\035\057\001\001\000" +
    "\002\001\001\000\010\010\112\011\113\012\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\120\012\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\015\126" +
    "\016\050\017\023\020\031\021\017\022\060\023\021\024" +
    "\056\025\016\026\024\027\054\035\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\135\022\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\031\140\032\012\036\036\037\025\040\030\041\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\145\012\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\015\153\016\050\017\023\020\031" +
    "\021\017\022\060\023\021\024\056\025\016\026\024\027" +
    "\054\035\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\015\156\016\050\017\023\020" +
    "\031\021\017\022\060\023\021\024\056\025\016\026\024" +
    "\027\054\035\057\001\001\000\002\001\001\000\016\031" +
    "\160\032\012\036\036\037\025\040\030\041\015\001\001" +
    "\000\002\001\001\000\016\031\162\032\012\036\036\037" +
    "\025\040\030\041\015\001\001\000\002\001\001\000\006" +
    "\021\164\022\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\170\011\113\012\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\176\012\027\015\175" +
    "\016\050\017\023\020\031\021\017\022\060\023\021\024" +
    "\056\025\016\026\024\027\054\035\057\001\001\000\002" +
    "\001\001\000\032\015\177\016\050\017\023\020\031\021" +
    "\017\022\060\023\021\024\056\025\016\026\024\027\054" +
    "\035\057\001\001\000\002\001\001\000\032\015\201\016" +
    "\050\017\023\020\031\021\017\022\060\023\021\024\056" +
    "\025\016\026\024\027\054\035\057\001\001\000\002\001" +
    "\001\000\032\015\203\016\050\017\023\020\031\021\017" +
    "\022\060\023\021\024\056\025\016\026\024\027\054\035" +
    "\057\001\001\000\002\001\001\000\016\031\205\032\012" +
    "\036\036\037\025\040\030\041\015\001\001\000\002\001" +
    "\001\000\032\015\207\016\050\017\023\020\031\021\017" +
    "\022\060\023\021\024\056\025\016\026\024\027\054\035" +
    "\057\001\001\000\002\001\001\000\032\015\211\016\050" +
    "\017\023\020\031\021\017\022\060\023\021\024\056\025" +
    "\016\026\024\027\054\035\057\001\001\000\002\001\001" +
    "\000\016\031\213\032\012\036\036\037\025\040\030\041" +
    "\015\001\001\000\002\001\001\000\004\020\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma 
            {
              Object RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Hola inicio Programa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicioprograma ::= INT MAIN LPAR RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpoPrograma ::= listaDeclaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpoPrograma ::= listaStatements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpoPrograma ::= listaExpresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeclaraciones ::= listaDeclaraciones COMMA declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= especificadorTipo ID PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaExpresiones ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaExpresiones ::= listaExpresiones COMMA expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresiones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= exprAutoSUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= exprAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= exprBooleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= exprCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exprSimple ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exprSimple ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exprSimple ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exprAritmetica ::= exprAritmetica OPSUM exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exprAritmetica ::= exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operando ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exprMult ::= exprMult OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprMult",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exprAutoSUM ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAutoSUM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exprBooleana ::= exprSimple AND exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exprBooleana ::= exprSimple OR exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamadaFuncion ::= ID LPAR listaParametros RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamadaFuncion ::= comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comandos ::= PRINTF LPAR CONSTSTRING COMMA operando RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaStatements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaStatements",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaStatements ::= listaStatements COMMA statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaStatements",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= statementCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= statementExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= statementSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= statementIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= statementSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statementCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementCompuesto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statementCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementCompuesto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // listaBloques ::= listaBloques itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // itemBloque ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // itemBloque ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statementSeleccion ::= IF LPAR expresion RPAR statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementSeleccion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statementSeleccion ::= IF LPAR expresion RPAR statement ELSE statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementSeleccion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statementIteracion ::= WHILE LPAR expresion RPAR statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statementIteracion ::= FOR LPAR expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statementIteracion ::= FOR LPAR declaracion expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statementSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statementSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statementSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

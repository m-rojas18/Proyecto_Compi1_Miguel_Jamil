
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\003\012\000\002\013\005\000" +
    "\002\013\003\000\002\014\004\000\002\014\002\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\003\000\002\006\005\000" +
    "\002\011\003\000\002\011\003\000\002\011\005\000\002" +
    "\012\003\000\002\012\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\004\000\002\020\003\000\002" +
    "\020\003\000\002\030\006\000\002\030\010\000\002\030" +
    "\010\000\002\031\005\000\002\031\004\000\002\032\003" +
    "\000\002\032\004\000\002\033\003\000\002\033\003\000" +
    "\002\036\007\000\002\036\011\000\002\037\007\000\002" +
    "\037\014\000\002\037\013\000\002\040\004\000\002\040" +
    "\005\000\002\040\004\000\002\035\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\003\000" +
    "\002\015\004\000\002\021\005\000\002\021\005\000\002" +
    "\023\003\000\002\023\003\000\002\024\005\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\017\005" +
    "\000\002\010\003\000\002\010\003\000\002\010\005\000" +
    "\002\010\003\000\002\027\005\000\002\027\006\000\002" +
    "\041\005\000\002\041\003\000\002\042\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\003\006\016\007\001\002\000\004\002" +
    "\243\001\002\000\014\002\uffff\013\015\016\020\017\017" +
    "\020\013\001\002\000\012\035\225\036\224\037\226\041" +
    "\223\001\002\000\004\010\010\001\002\000\004\036\011" +
    "\001\002\000\016\013\015\016\020\017\017\020\013\034" +
    "\ufff6\037\ufff6\001\002\000\006\034\022\037\023\001\002" +
    "\000\004\032\ufff2\001\002\000\006\034\ufff8\037\ufff8\001" +
    "\002\000\004\032\ufff5\001\002\000\004\032\021\001\002" +
    "\000\004\032\ufff4\001\002\000\004\032\ufff3\001\002\000" +
    "\006\034\ufff7\037\ufff7\001\002\000\016\013\015\016\020" +
    "\017\017\020\013\034\ufff6\037\ufff6\001\002\000\004\040" +
    "\024\001\002\000\050\003\046\004\042\006\060\007\036" +
    "\011\052\012\045\013\015\014\053\015\026\016\020\017" +
    "\017\020\013\027\032\031\064\032\043\035\035\036\063" +
    "\040\061\041\uffef\001\002\000\012\026\uffc0\034\uffc7\035" +
    "\uffc7\037\uffc7\001\002\000\004\036\215\001\002\000\004" +
    "\026\211\001\002\000\050\003\046\004\042\006\060\007" +
    "\036\011\052\012\045\013\015\014\053\015\026\016\020" +
    "\017\017\020\013\027\032\031\064\032\043\035\035\036" +
    "\063\040\061\041\uffef\001\002\000\020\021\uffbc\022\uffbc" +
    "\025\uffbc\026\uffbc\034\uffbc\035\uffbc\037\uffbc\001\002\000" +
    "\020\021\uffdc\022\uffdc\025\uffdc\026\uffdc\034\uffdc\035\uffdc" +
    "\037\uffdc\001\002\000\020\021\uffb7\022\uffb7\025\uffb7\026" +
    "\uffb7\034\uffb7\035\uffb7\037\uffb7\001\002\000\010\034\uffc5" +
    "\035\uffc5\037\uffc5\001\002\000\054\003\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\027\uffde\031\uffde\032" +
    "\uffde\034\uffde\035\uffde\036\uffde\040\uffde\041\uffde\001\002" +
    "\000\004\036\167\001\002\000\004\032\161\001\002\000" +
    "\004\035\157\001\002\000\052\003\uffe5\004\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\027\uffe5\031\uffe5\032\uffe5\034\155" +
    "\035\uffe5\036\uffe5\040\uffe5\041\uffe5\001\002\000\004\036" +
    "\147\001\002\000\026\021\uffba\022\uffba\023\144\024\143" +
    "\025\uffba\026\uffba\034\uffba\035\uffba\036\112\037\uffba\001" +
    "\002\000\054\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\027\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\040\uffe3\041\uffe3\001\002\000\014\027\032\031" +
    "\064\032\043\035\141\036\063\001\002\000\004\035\137" +
    "\001\002\000\054\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\027\uffdf\031\uffdf\032\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\040\uffdf\041\uffdf\001\002\000\004\035\136" +
    "\001\002\000\004\041\135\001\002\000\004\035\134\001" +
    "\002\000\004\036\126\001\002\000\050\003\046\004\042" +
    "\006\060\007\036\011\052\012\045\013\015\014\053\015" +
    "\026\016\020\017\017\020\013\027\032\031\064\032\043" +
    "\035\035\036\063\040\061\041\uffef\001\002\000\016\021" +
    "\122\025\121\026\uffc1\034\uffc8\035\uffc8\037\uffc8\001\002" +
    "\000\054\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\001\002\000\020\021\uffbe\022\107" +
    "\025\uffbe\026\uffbe\034\uffbe\035\uffbe\037\uffbe\001\002\000" +
    "\004\036\103\001\002\000\050\003\046\004\042\006\060" +
    "\007\036\011\052\012\045\013\015\014\053\015\026\016" +
    "\020\017\017\020\013\027\032\031\064\032\043\035\035" +
    "\036\063\040\061\041\100\001\002\000\054\003\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\027\uffe1\031" +
    "\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1" +
    "\001\002\000\012\027\032\031\064\032\043\036\063\001" +
    "\002\000\020\021\uffdb\022\uffdb\025\uffdb\026\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\001\002\000\020\021\uffb9\022\uffb9\025" +
    "\uffb9\026\uffb9\034\uffb9\035\uffb9\037\uffb9\001\002\000\052" +
    "\003\uffed\004\uffed\006\uffed\007\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\027\uffed" +
    "\031\uffed\032\uffed\034\070\035\uffed\036\uffed\040\uffed\041" +
    "\uffed\001\002\000\054\003\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\027\uffe0\031\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\040\uffe0\041\uffe0\001\002\000\012\013" +
    "\015\016\020\017\017\020\013\001\002\000\050\003\uffee" +
    "\004\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\027\uffee\031\uffee" +
    "\032\uffee\035\uffee\036\uffee\040\uffee\041\uffee\001\002\000" +
    "\004\037\073\001\002\000\020\021\uffb8\022\uffb8\025\uffb8" +
    "\026\uffb8\034\uffb8\035\uffb8\037\uffb8\001\002\000\004\041" +
    "\102\001\002\000\050\003\046\004\042\006\060\007\036" +
    "\011\052\012\045\013\015\014\053\015\026\016\020\017" +
    "\017\020\013\027\032\031\064\032\043\035\035\036\063" +
    "\040\061\041\uffd5\001\002\000\050\003\uffd3\004\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\027\uffd3\031\uffd3\032\uffd3\035" +
    "\uffd3\036\uffd3\040\uffd3\041\uffd3\001\002\000\050\003\uffd2" +
    "\004\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\027\uffd2\031\uffd2" +
    "\032\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\001\002\000" +
    "\054\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\027\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\004\041\uffd4\001\002\000" +
    "\054\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\041\uffd7\001\002\000\012\027\032\031\064\032" +
    "\043\036\063\001\002\000\004\037\105\001\002\000\036" +
    "\003\046\004\042\006\060\007\036\011\052\012\045\014" +
    "\053\015\026\027\032\031\064\032\043\035\035\036\063" +
    "\040\061\001\002\000\054\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\027\uffcf\031\uffcf\032\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\001\002\000\012" +
    "\027\032\031\064\032\110\036\063\001\002\000\022\021" +
    "\uffba\022\uffba\025\uffba\026\uffba\034\uffba\035\uffba\036\112" +
    "\037\uffba\001\002\000\020\021\uffbb\022\uffbb\025\uffbb\026" +
    "\uffbb\034\uffbb\035\uffbb\037\uffbb\001\002\000\006\032\113" +
    "\037\115\001\002\000\006\034\uffe8\037\uffe8\001\002\000" +
    "\006\034\116\037\117\001\002\000\020\021\uffb6\022\uffb6" +
    "\025\uffb6\026\uffb6\034\uffb6\035\uffb6\037\uffb6\001\002\000" +
    "\004\032\120\001\002\000\020\021\uffb5\022\uffb5\025\uffb5" +
    "\026\uffb5\034\uffb5\035\uffb5\037\uffb5\001\002\000\010\034" +
    "\uffe7\035\uffe7\037\uffe7\001\002\000\012\027\032\031\064" +
    "\032\110\036\063\001\002\000\012\027\032\031\064\032" +
    "\110\036\063\001\002\000\020\021\uffbd\022\107\025\uffbd" +
    "\026\uffbd\034\uffbd\035\uffbd\037\uffbd\001\002\000\014\021" +
    "\122\026\uffbf\034\uffbf\035\uffbf\037\uffbf\001\002\000\004" +
    "\041\ufff1\001\002\000\004\030\127\001\002\000\006\034" +
    "\130\037\131\001\002\000\004\032\113\001\002\000\004" +
    "\035\uffda\001\002\000\006\034\116\037\133\001\002\000" +
    "\004\035\uffd9\001\002\000\054\003\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\027\uffcc\031\uffcc\032\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041\uffcc\001\002\000" +
    "\014\002\ufffa\013\ufffa\016\ufffa\017\ufffa\020\ufffa\001\002" +
    "\000\054\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\040\uffc9\041\uffc9\001\002\000\054\003\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\027\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\004\035\142\001\002\000\054\003\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\027\uffca\031\uffca" +
    "\032\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\001" +
    "\002\000\054\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\040\uffcb\041\uffcb\001\002\000\014\027\032\031" +
    "\064\032\043\033\145\036\063\001\002\000\010\034\uffc4" +
    "\035\uffc4\037\uffc4\001\002\000\010\034\uffc2\035\uffc2\037" +
    "\uffc2\001\002\000\010\034\uffc3\035\uffc3\037\uffc3\001\002" +
    "\000\012\027\032\031\064\032\043\036\063\001\002\000" +
    "\004\037\151\001\002\000\036\003\046\004\042\006\060" +
    "\007\036\011\052\012\045\014\053\015\026\027\032\031" +
    "\064\032\043\035\035\036\063\040\061\001\002\000\054" +
    "\003\uffd1\004\uffd1\005\153\006\uffd1\007\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1\040" +
    "\uffd1\041\uffd1\001\002\000\036\003\046\004\042\006\060" +
    "\007\036\011\052\012\045\014\053\015\026\027\032\031" +
    "\064\032\043\035\035\036\063\040\061\001\002\000\054" +
    "\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\027\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036\uffd0\040" +
    "\uffd0\041\uffd0\001\002\000\036\003\046\004\042\006\060" +
    "\007\036\011\052\012\045\014\053\015\026\027\032\031" +
    "\064\032\043\035\035\036\063\040\061\001\002\000\050" +
    "\003\uffe6\004\uffe6\006\uffe6\007\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6" +
    "\031\uffe6\032\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\001" +
    "\002\000\054\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\027\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\040\uffe4\041\uffe4\001\002\000\006\034\165\035" +
    "\uffea\001\002\000\010\024\143\034\uffe8\035\uffe8\001\002" +
    "\000\006\034\116\035\uffeb\001\002\000\004\035\164\001" +
    "\002\000\052\003\uffec\004\uffec\006\uffec\007\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\027\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036\uffec" +
    "\040\uffec\041\uffec\001\002\000\004\032\161\001\002\000" +
    "\004\035\uffe9\001\002\000\014\013\015\016\020\017\017" +
    "\020\013\032\171\001\002\000\004\035\201\001\002\000" +
    "\004\024\143\001\002\000\012\027\032\031\064\032\043" +
    "\036\063\001\002\000\004\035\174\001\002\000\004\032" +
    "\175\001\002\000\004\023\176\001\002\000\004\037\177" +
    "\001\002\000\036\003\046\004\042\006\060\007\036\011" +
    "\052\012\045\014\053\015\026\027\032\031\064\032\043" +
    "\035\035\036\063\040\061\001\002\000\054\003\uffcd\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd" +
    "\001\002\000\012\027\032\031\064\032\043\036\063\001" +
    "\002\000\004\035\203\001\002\000\004\032\204\001\002" +
    "\000\004\023\205\001\002\000\004\037\206\001\002\000" +
    "\036\003\046\004\042\006\060\007\036\011\052\012\045" +
    "\014\053\015\026\027\032\031\064\032\043\035\035\036" +
    "\063\040\061\001\002\000\054\003\uffce\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\027\uffce\031\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\001\002\000" +
    "\004\041\ufff0\001\002\000\012\027\032\031\064\032\110" +
    "\036\063\001\002\000\014\021\122\025\121\034\uffc1\035" +
    "\uffc1\037\uffc1\001\002\000\010\034\uffc0\035\uffc0\037\uffc0" +
    "\001\002\000\010\034\uffc6\035\uffc6\037\uffc6\001\002\000" +
    "\004\030\216\001\002\000\004\034\217\001\002\000\004" +
    "\033\220\001\002\000\004\037\221\001\002\000\004\035" +
    "\uffd8\001\002\000\006\034\ufff9\037\ufff9\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\ufffb\001\002\000\004\002\000" +
    "\001\002\000\006\002\uffb3\034\241\001\002\000\004\032" +
    "\232\001\002\000\004\036\233\001\002\000\016\013\015" +
    "\016\020\017\017\020\013\034\ufff6\037\ufff6\001\002\000" +
    "\006\034\022\037\235\001\002\000\004\040\236\001\002" +
    "\000\050\003\046\004\042\006\060\007\036\011\052\012" +
    "\045\013\015\014\053\015\026\016\020\017\017\020\013" +
    "\027\032\031\064\032\043\035\035\036\063\040\061\041" +
    "\uffef\001\002\000\004\041\240\001\002\000\006\002\uffb2" +
    "\034\uffb2\001\002\000\012\013\015\016\020\017\017\020" +
    "\013\001\002\000\004\002\uffb4\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\007\230\041\226\042\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\015\013\011\014\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\015\014\221\001\001\000\002\001\001\000" +
    "\054\004\050\005\053\006\065\007\036\010\030\015\047" +
    "\016\054\017\056\020\064\021\033\023\026\024\024\025" +
    "\027\026\040\027\032\030\037\031\043\035\066\036\055" +
    "\037\061\040\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\207\005\053\006\065" +
    "\007\036\010\030\015\047\016\054\017\056\020\064\021" +
    "\033\023\026\024\024\025\027\026\040\027\032\030\037" +
    "\031\043\035\066\036\055\037\061\040\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\162\012\161\021\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\030\015\137\016\054\017\056\020\064" +
    "\021\033\023\026\024\024\027\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\124\005" +
    "\053\006\065\007\036\010\030\015\047\016\054\017\056" +
    "\020\064\021\033\023\026\024\024\025\027\026\040\027" +
    "\032\030\037\031\043\035\066\036\055\037\061\040\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\005\076\006\065\007\036" +
    "\010\030\015\047\016\054\017\056\020\064\021\033\023" +
    "\026\024\024\026\075\027\032\030\037\031\043\032\073" +
    "\033\074\035\066\036\055\037\061\040\046\001\001\000" +
    "\002\001\001\000\024\010\030\015\071\016\054\017\056" +
    "\020\064\021\033\023\026\024\024\027\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\070\006\065\007\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\005\076\006\065\007\036\010\030\015" +
    "\047\016\054\017\056\020\064\021\033\023\026\024\024" +
    "\026\075\027\032\030\037\031\043\032\100\033\074\035" +
    "\066\036\055\037\061\040\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\030\015\103\016\054\017\056" +
    "\020\064\021\033\023\026\024\024\027\032\001\001\000" +
    "\002\001\001\000\042\010\030\015\047\016\054\017\056" +
    "\020\064\021\033\023\026\024\024\026\105\027\032\030" +
    "\037\031\043\035\066\036\055\037\061\040\046\001\001" +
    "\000\002\001\001\000\010\010\110\020\064\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\030\016\123\017\056\020\064\027\032\001" +
    "\001\000\012\010\030\017\122\020\064\027\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\030\015\145\016\054\017\056\020\064" +
    "\021\033\023\026\024\024\027\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\010\030" +
    "\015\147\016\054\017\056\020\064\021\033\023\026\024" +
    "\024\027\032\001\001\000\002\001\001\000\042\010\030" +
    "\015\047\016\054\017\056\020\064\021\033\023\026\024" +
    "\024\026\151\027\032\030\037\031\043\035\066\036\055" +
    "\037\061\040\046\001\001\000\002\001\001\000\042\010" +
    "\030\015\047\016\054\017\056\020\064\021\033\023\026" +
    "\024\024\026\153\027\032\030\037\031\043\035\066\036" +
    "\055\037\061\040\046\001\001\000\002\001\001\000\044" +
    "\010\030\015\047\016\054\017\056\020\064\021\033\023" +
    "\026\024\024\025\155\026\040\027\032\030\037\031\043" +
    "\035\066\036\055\037\061\040\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\165\012\161\021\157\001\001\000\002\001\001" +
    "\000\010\006\171\007\036\021\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\010\030\015\172\016\054" +
    "\017\056\020\064\021\033\023\026\024\024\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\030\015\047\016\054\017" +
    "\056\020\064\021\033\023\026\024\024\026\177\027\032" +
    "\030\037\031\043\035\066\036\055\037\061\040\046\001" +
    "\001\000\002\001\001\000\024\010\030\015\201\016\054" +
    "\017\056\020\064\021\033\023\026\024\024\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\010\030\015\047\016\054\017" +
    "\056\020\064\021\033\023\026\024\024\026\206\027\032" +
    "\030\037\031\043\035\066\036\055\037\061\040\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\030" +
    "\016\211\017\056\020\064\023\213\024\212\027\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\015\013\233\014\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\236" +
    "\005\053\006\065\007\036\010\030\015\047\016\054\017" +
    "\056\020\064\021\033\023\026\024\024\025\027\026\040" +
    "\027\032\030\037\031\043\035\066\036\055\037\061\040" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\230\041\241\042\227\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/*
        //public static LinkedList<TablaError> TablaEL = new LinkedList<TablaError>();

        //Metodo para error sintactico
        public void syntax_error(Symbol s)
        {
                String lexema = s.value.toString();
                int fila = s.rigth;
                int column = s.left;

                System.out.println("Error Sintactico Recuperado");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Columna: " + columna);

                //TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter No Esperado");
                //System.out.println(datos);
                //TablaES.add(datos);
        }

        //Metodos para error no recuperable
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                String lexema = s.value.toString();
                int fila = s.right;
                int column = s.left;

                System.out.println("Error Sintactico, Modo Panico");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Column: " + columna);

                //TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
                //System.out.println(datos);
                //TablaES.add(datos);
        }
        */
        public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= error DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= error LPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // programa ::= error RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpoPrograma ::= declaraciones cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoPrograma ::= statements cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaraciones ::= declaracion COMMA declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionVar ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionVar ::= exprAsignacion COMMA declaracionVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID ld" + l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= stmnt COMMA statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statements ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmnt ::= error PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // constante ::= INTEGER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Numero: " + f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // itemBloque ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // itemBloque ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmntIteracion ::= WHILE LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmntIteracion ::= FOR LPAR exprAsignacion PUNTOCOMA expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("FOR (" + k);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmntIteracion ::= FOR LPAR declaracion expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("BREAK;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmntSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= condicion OPLOGIC condicion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("OPLOGIC: " + op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // condicion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprRelacional ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exprSimple ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exprSimple ::= exprSimple OPSUM termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino ::= termino OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operando ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID operador" + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operando ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operando ::= llamadoFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadoFunc ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamadoFunc ::= ID LPAR listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // subprogramas ::= subprograma COMMA subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // subprograma ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\012\005\000\002\012\003" +
    "\000\002\013\004\000\002\013\002\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\004\005\000\002\004\003\000\002\004\003\000\002\004" +
    "\002\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\010\003\000\002\010\005\000\002\010\007\000" +
    "\002\011\005\000\002\011\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\003\000\002\025\004\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\007\000" +
    "\002\026\006\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\020" +
    "\003\000\002\020\003\000\002\027\006\000\002\027\010" +
    "\000\002\027\010\000\002\032\005\000\002\032\004\000" +
    "\002\033\003\000\002\033\004\000\002\034\003\000\002" +
    "\034\003\000\002\036\004\000\002\037\007\000\002\037" +
    "\011\000\002\040\007\000\002\040\013\000\002\040\014" +
    "\000\002\040\014\000\002\041\004\000\002\041\005\000" +
    "\002\041\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\005\000\002\014\003\000\002\014\004\000\002\014" +
    "\003\000\002\014\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\016\005\000\002\016\003\000" +
    "\002\017\005\000\002\021\005\000\002\021\005\000\002" +
    "\022\004\000\002\023\005\000\002\023\005\000\002\035" +
    "\011\000\002\042\005\000\002\042\003\000\002\043\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\016\006\001\002\000\004\002\266\001" +
    "\002\000\014\002\uffff\013\016\016\017\017\015\020\012" +
    "\001\002\000\004\010\007\001\002\000\004\037\010\001" +
    "\002\000\016\013\016\016\017\017\015\020\012\035\ufffa" +
    "\040\ufffa\001\002\000\006\035\021\040\022\001\002\000" +
    "\004\033\ufff6\001\002\000\006\035\ufffc\040\ufffc\001\002" +
    "\000\004\033\020\001\002\000\004\033\ufff8\001\002\000" +
    "\004\033\ufff9\001\002\000\004\033\ufff7\001\002\000\006" +
    "\035\ufffb\040\ufffb\001\002\000\016\013\016\016\017\017" +
    "\015\020\012\035\ufffa\040\ufffa\001\002\000\004\041\023" +
    "\001\002\000\046\004\040\006\055\007\033\011\047\012" +
    "\043\013\016\014\051\015\024\016\017\017\015\020\012" +
    "\030\027\032\061\033\042\036\031\037\060\041\056\042" +
    "\ufff2\001\002\000\004\037\244\001\002\000\004\042\ufff3" +
    "\001\002\000\010\036\uffbc\040\uffbc\043\uffbc\001\002\000" +
    "\024\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027\uffd8\035\uffd8" +
    "\036\uffd8\040\uffd8\043\uffd8\001\002\000\010\036\uffba\040" +
    "\uffba\043\uffba\001\002\000\052\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\030\uffe0\032\uffe0\033\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\041\uffe0\042\uffe0\001\002\000\012\021" +
    "\242\036\uffbe\040\uffbe\043\uffbe\001\002\000\004\037\212" +
    "\001\002\000\004\033\177\001\002\000\004\036\176\001" +
    "\002\000\050\004\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\030" +
    "\uffe8\032\uffe8\033\uffe8\035\174\036\uffe8\037\uffe8\041\uffe8" +
    "\042\uffe8\001\002\000\014\021\uffb8\022\172\036\uffb8\040" +
    "\uffb8\043\uffb8\001\002\000\004\037\164\001\002\000\052" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\030\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\042" +
    "\uffe5\001\002\000\020\023\075\024\074\025\uffc3\026\uffc3" +
    "\027\uffc3\036\uffc3\037\153\001\002\000\006\030\150\036" +
    "\151\001\002\000\052\004\uffe1\005\uffe1\006\uffe1\007\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\030\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\041\uffe1\042\uffe1\001\002\000\004\036\147\001" +
    "\002\000\004\042\146\001\002\000\004\036\145\001\002" +
    "\000\052\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\041" +
    "\uffe7\042\uffe7\001\002\000\004\037\134\001\002\000\036" +
    "\004\040\006\055\007\033\011\047\012\043\014\051\015" +
    "\024\030\027\032\061\033\042\036\031\037\060\041\056" +
    "\042\ufff4\001\002\000\016\025\120\026\121\027\122\036" +
    "\uffc0\040\uffc0\043\uffc0\001\002\000\052\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\030\uffe4\032\uffe4\033\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\041\uffe4\042\uffe4\001\002\000" +
    "\004\037\114\001\002\000\046\004\040\006\055\007\033" +
    "\011\047\012\043\013\016\014\051\015\024\016\017\017" +
    "\015\020\012\030\027\032\061\033\042\036\031\037\060" +
    "\041\056\042\111\001\002\000\052\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\030\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\001\002\000\012" +
    "\030\027\032\061\033\073\037\060\001\002\000\024\021" +
    "\uffd7\022\uffd7\025\uffd7\026\uffd7\027\uffd7\035\uffd7\036\uffd7" +
    "\040\uffd7\043\uffd7\001\002\000\004\036\071\001\002\000" +
    "\010\036\uffbb\040\uffbb\043\uffbb\001\002\000\022\021\uffc2" +
    "\022\uffc2\025\uffc2\026\uffc2\027\uffc2\036\uffc2\040\uffc2\043" +
    "\uffc2\001\002\000\050\004\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\030\ufff0\032\ufff0\033\ufff0\035\067\036\ufff0\037\ufff0" +
    "\041\ufff0\042\ufff0\001\002\000\052\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\030\uffe2\032\uffe2\033\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\041\uffe2\042\uffe2\001\002\000\012" +
    "\013\016\016\017\017\015\020\012\001\002\000\046\004" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\030\ufff1\032\ufff1\033" +
    "\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1\001\002\000\010" +
    "\036\uffbf\040\uffbf\043\uffbf\001\002\000\004\040\100\001" +
    "\002\000\022\023\075\024\074\025\uffc3\026\uffc3\027\uffc3" +
    "\036\uffc3\040\uffc3\043\uffc3\001\002\000\014\030\027\032" +
    "\061\033\073\034\076\037\060\001\002\000\004\036\uffb4" +
    "\001\002\000\010\036\uffb5\040\uffb5\043\uffb5\001\002\000" +
    "\010\036\uffb6\040\uffb6\043\uffb6\001\002\000\020\025\uffc1" +
    "\026\uffc1\027\uffc1\036\uffc1\040\uffc1\043\uffc1\044\101\001" +
    "\002\000\012\030\027\032\061\033\073\037\060\001\002" +
    "\000\004\043\103\001\002\000\012\030\027\032\061\033" +
    "\073\037\060\001\002\000\010\036\uffb1\040\uffb1\043\uffb1" +
    "\001\002\000\004\042\113\001\002\000\046\004\040\006" +
    "\055\007\033\011\047\012\043\013\016\014\051\015\024" +
    "\016\017\017\015\020\012\030\027\032\061\033\042\036" +
    "\031\037\060\041\056\042\uffd1\001\002\000\046\004\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\030\uffcf\032\uffcf\033\uffcf" +
    "\036\uffcf\037\uffcf\041\uffcf\042\uffcf\001\002\000\046\004" +
    "\uffce\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\030\uffce\032\uffce\033" +
    "\uffce\036\uffce\037\uffce\041\uffce\042\uffce\001\002\000\052" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042" +
    "\uffd2\001\002\000\004\042\uffd0\001\002\000\052\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\030\uffd3\032\uffd3" +
    "\033\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\001" +
    "\002\000\004\030\115\001\002\000\004\040\116\001\002" +
    "\000\034\004\040\006\055\007\033\011\047\012\043\014" +
    "\051\015\024\030\027\032\061\033\042\036\031\037\060" +
    "\041\056\001\002\000\052\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\030\uffca\032\uffca\033\uffca\035\uffca\036" +
    "\uffca\037\uffca\041\uffca\042\uffca\001\002\000\012\030\027" +
    "\032\061\033\123\037\125\001\002\000\012\030\027\032" +
    "\061\033\123\037\125\001\002\000\012\030\027\032\061" +
    "\033\123\037\125\001\002\000\014\021\uffc3\022\uffc3\036" +
    "\uffc3\040\uffc3\043\uffc3\001\002\000\010\036\uffb2\040\uffb2" +
    "\043\uffb2\001\002\000\012\030\027\032\061\033\073\037" +
    "\060\001\002\000\004\040\127\001\002\000\014\021\uffc1" +
    "\022\uffc1\036\uffc1\040\uffc1\043\uffc1\001\002\000\010\036" +
    "\uffb3\040\uffb3\043\uffb3\001\002\000\010\036\uffbd\040\uffbd" +
    "\043\uffbd\001\002\000\046\004\040\006\055\007\033\011" +
    "\047\012\043\013\016\014\051\015\024\016\017\017\015" +
    "\020\012\030\027\032\061\033\042\036\031\037\060\041" +
    "\056\042\ufff2\001\002\000\004\042\ufff5\001\002\000\004" +
    "\031\135\001\002\000\006\035\136\040\137\001\002\000" +
    "\012\030\027\032\061\033\140\034\142\001\002\000\004" +
    "\036\uffd6\001\002\000\006\035\uffda\040\uffda\001\002\000" +
    "\004\040\144\001\002\000\006\035\uffd9\040\uffd9\001\002" +
    "\000\006\035\uffdb\040\uffdb\001\002\000\004\036\uffd5\001" +
    "\002\000\052\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\030\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\041\uffc6\042\uffc6\001\002\000\014\002\ufffe\013\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\001\002\000\052\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\030\uffcd\032\uffcd\033\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\001\002\000" +
    "\004\036\152\001\002\000\052\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\030\uffc4\032\uffc4\033\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\041\uffc4\042\uffc4\001\002\000\052\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\030\uffc5\032" +
    "\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\001\002\000\014\030\027\032\061\033\140\034\142\040" +
    "\156\001\002\000\006\035\162\040\uffdc\001\002\000\004" +
    "\040\160\001\002\000\004\036\157\001\002\000\052\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\030\uffde\032" +
    "\uffde\033\uffde\035\uffde\036\uffde\037\uffde\041\uffde\042\uffde" +
    "\001\002\000\004\036\161\001\002\000\052\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf\042\uffdf\001\002" +
    "\000\012\030\027\032\061\033\140\034\142\001\002\000" +
    "\004\040\uffdd\001\002\000\004\030\165\001\002\000\004" +
    "\040\166\001\002\000\034\004\040\006\055\007\033\011" +
    "\047\012\043\014\051\015\024\030\027\032\061\033\042" +
    "\036\031\037\060\041\056\001\002\000\052\004\uffcc\005" +
    "\170\006\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\030\uffcc\032\uffcc\033" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\001\002" +
    "\000\034\004\040\006\055\007\033\011\047\012\043\014" +
    "\051\015\024\030\027\032\061\033\042\036\031\037\060" +
    "\041\056\001\002\000\052\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\030\uffcb\032\uffcb\033\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\041\uffcb\042\uffcb\001\002\000\012\030\027" +
    "\032\061\033\123\037\125\001\002\000\014\021\uffb7\022" +
    "\uffb7\036\uffb7\040\uffb7\043\uffb7\001\002\000\034\004\040" +
    "\006\055\007\033\011\047\012\043\014\051\015\024\030" +
    "\027\032\061\033\042\036\031\037\060\041\056\001\002" +
    "\000\046\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\036\uffe9\037\uffe9\041\uffe9\042\uffe9\001" +
    "\002\000\052\004\uffe6\005\uffe6\006\uffe6\007\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\030\uffe6\032\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\041\uffe6\042\uffe6\001\002\000\010\024\204\035\203\036" +
    "\uffea\001\002\000\004\036\uffee\001\002\000\004\036\202" +
    "\001\002\000\050\004\uffef\006\uffef\007\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\030\uffef\032\uffef\033\uffef\035\uffef\036\uffef\037\uffef\041" +
    "\uffef\042\uffef\001\002\000\004\033\210\001\002\000\004" +
    "\030\205\001\002\000\006\035\206\036\uffed\001\002\000" +
    "\004\033\177\001\002\000\004\036\uffec\001\002\000\006" +
    "\035\203\036\uffea\001\002\000\004\036\uffeb\001\002\000" +
    "\016\013\016\016\017\017\015\020\012\030\214\033\213" +
    "\001\002\000\004\030\233\001\002\000\004\036\225\001" +
    "\002\000\004\030\216\001\002\000\004\036\217\001\002" +
    "\000\004\030\220\001\002\000\004\036\221\001\002\000" +
    "\004\030\222\001\002\000\004\040\223\001\002\000\034" +
    "\004\040\006\055\007\033\011\047\012\043\014\051\015" +
    "\024\030\027\032\061\033\042\036\031\037\060\041\056" +
    "\001\002\000\052\004\uffc8\005\uffc8\006\uffc8\007\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\030\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\041\uffc8\042\uffc8\001\002\000\004\030\226\001\002" +
    "\000\004\036\227\001\002\000\004\030\230\001\002\000" +
    "\004\040\231\001\002\000\034\004\040\006\055\007\033" +
    "\011\047\012\043\014\051\015\024\030\027\032\061\033" +
    "\042\036\031\037\060\041\056\001\002\000\052\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\030\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\001" +
    "\002\000\004\036\234\001\002\000\004\030\235\001\002" +
    "\000\004\036\236\001\002\000\004\030\237\001\002\000" +
    "\004\040\240\001\002\000\034\004\040\006\055\007\033" +
    "\011\047\012\043\014\051\015\024\030\027\032\061\033" +
    "\042\036\031\037\060\041\056\001\002\000\052\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\030\uffc7\032\uffc7" +
    "\033\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7\001" +
    "\002\000\002\001\002\000\014\021\uffb9\022\172\036\uffb9" +
    "\040\uffb9\043\uffb9\001\002\000\004\031\245\001\002\000" +
    "\004\035\246\001\002\000\004\034\247\001\002\000\004" +
    "\040\250\001\002\000\004\036\uffd4\001\002\000\006\035" +
    "\ufffd\040\ufffd\001\002\000\004\002\000\001\002\000\006" +
    "\002\uffaf\035\264\001\002\000\004\033\255\001\002\000" +
    "\004\037\256\001\002\000\012\030\027\032\061\033\140" +
    "\034\142\001\002\000\004\040\260\001\002\000\004\041" +
    "\261\001\002\000\046\004\040\006\055\007\033\011\047" +
    "\012\043\013\016\014\051\015\024\016\017\017\015\020" +
    "\012\030\027\032\061\033\042\036\031\037\060\041\056" +
    "\042\ufff2\001\002\000\004\042\263\001\002\000\006\002" +
    "\uffae\035\uffae\001\002\000\012\013\016\016\017\017\015" +
    "\020\012\001\002\000\004\002\uffb0\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\007\253\042\251\043\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\013\012\010\013" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\013" +
    "\013\250\001\001\000\002\001\001\000\056\004\045\005" +
    "\051\006\064\007\033\014\044\015\052\016\031\017\036" +
    "\020\063\021\027\022\061\023\025\024\024\025\035\026" +
    "\047\027\034\032\040\035\062\036\065\037\053\040\056" +
    "\041\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\200\011\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\014\044\015\052\016\031" +
    "\017\036\020\063\021\027\022\061\023\025\024\131\025" +
    "\035\026\047\027\034\032\040\035\062\036\065\037\053" +
    "\040\056\041\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\107\006\064\007\033" +
    "\014\044\015\052\016\031\017\036\020\063\021\027\022" +
    "\061\023\025\025\106\026\047\027\034\032\040\033\104" +
    "\034\105\035\062\036\065\037\053\040\056\041\043\001" +
    "\001\000\002\001\001\000\024\014\071\015\052\016\031" +
    "\017\036\020\063\021\027\022\061\023\025\035\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\067\006\064\007\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\076\015\052\016\031\017\036\020\063\021\027" +
    "\022\061\023\025\035\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\014\101\015\052\016\031\017\036\020\063\021\027\022" +
    "\061\023\025\035\062\001\001\000\002\001\001\000\024" +
    "\014\103\015\052\016\031\017\036\020\063\021\027\022" +
    "\061\023\025\035\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\107\006\064\007\033\014\044\015" +
    "\052\016\031\017\036\020\063\021\027\022\061\023\025" +
    "\025\106\026\047\027\034\032\040\033\111\034\105\035" +
    "\062\036\065\037\053\040\056\041\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\014\044\015\052\016\031\017\036\020\063\021" +
    "\027\022\061\023\025\025\116\026\047\027\034\032\040" +
    "\035\062\036\065\037\053\040\056\041\043\001\001\000" +
    "\002\001\001\000\006\015\130\020\063\001\001\000\006" +
    "\015\127\020\063\001\001\000\006\015\123\020\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\125" +
    "\015\052\016\031\017\036\020\063\021\027\022\061\023" +
    "\025\035\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\132\005" +
    "\051\006\064\007\033\014\044\015\052\016\031\017\036" +
    "\020\063\021\027\022\061\023\025\024\024\025\035\026" +
    "\047\027\034\032\040\035\062\036\065\037\053\040\056" +
    "\041\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\142\031\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\142\030\154" +
    "\031\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\142\030\162\031\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\014\044\015\052\016\031\017\036\020\063\021\027\022" +
    "\061\023\025\025\166\026\047\027\034\032\040\035\062" +
    "\036\065\037\053\040\056\041\043\001\001\000\002\001" +
    "\001\000\044\014\044\015\052\016\031\017\036\020\063" +
    "\021\027\022\061\023\025\025\170\026\047\027\034\032" +
    "\040\035\062\036\065\037\053\040\056\041\043\001\001" +
    "\000\002\001\001\000\006\015\172\020\063\001\001\000" +
    "\002\001\001\000\046\014\044\015\052\016\031\017\036" +
    "\020\063\021\027\022\061\023\025\024\174\025\035\026" +
    "\047\027\034\032\040\035\062\036\065\037\053\040\056" +
    "\041\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\206\011\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\214\007\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\014\044\015\052\016\031\017\036\020\063\021\027\022" +
    "\061\023\025\025\223\026\047\027\034\032\040\035\062" +
    "\036\065\037\053\040\056\041\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\014\044\015\052\016\031\017" +
    "\036\020\063\021\027\022\061\023\025\025\231\026\047" +
    "\027\034\032\040\035\062\036\065\037\053\040\056\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\014\044\015\052\016\031\017\036\020\063" +
    "\021\027\022\061\023\025\025\240\026\047\027\034\032" +
    "\040\035\062\036\065\037\053\040\056\041\043\001\001" +
    "\000\002\001\001\000\004\017\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\142\030\256\031\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\004\261\005\051" +
    "\006\064\007\033\014\044\015\052\016\031\017\036\020" +
    "\063\021\027\022\061\023\025\024\024\025\035\026\047" +
    "\027\034\032\040\035\062\036\065\037\053\040\056\041" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\253\042\264\043\252\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpoPrograma ::= declaraciones statements cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpoPrograma ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpoPrograma ::= statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion COMMA declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionVar ::= ID ASIGNACION INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionVar ::= ID ASIGNACION INTEGER COMMA declaracionVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaIdentificadores ::= ID COMMA listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= stmnt COMMA statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statements ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= stmntFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmntFunc ::= ID LPAR listaArgumentos RPAR PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmntFunc ::= ID LPAR RPAR PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntFunc",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaArgumentos ::= argumento COMMA listaArgumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaArgumentos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaArgumentos ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaArgumentos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // argumento ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // argumento ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // argumento ::= APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // constante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA argumento RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // itemBloque ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // itemBloque ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmntSeleccion ::= IF LPAR INTEGER RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmntSeleccion ::= IF LPAR INTEGER RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmntIteracion ::= WHILE LPAR INTEGER RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmntIteracion ::= FOR LPAR INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmntIteracion ::= FOR LPAR declaracion INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmntIteracion ::= FOR LPAR ID INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmntSalto ::= RETURN INTEGER PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprSimple ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprSimple ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprSimple ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= exprAutoSUM PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= exprAritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= exprBooleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= exprCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exprAritmetica ::= exprAritmetica OPSUM exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exprAritmetica ::= exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exprMult ::= exprMult OPMULT exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprMult",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprAutoSUM ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAutoSUM",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exprBooleana ::= exprSimple AND exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exprBooleana ::= exprSimple OR exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprBooleana",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCondicional",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // subprogramas ::= subprograma COMMA subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // subprograma ::= especificadorTipo ID LPAR listaArgumentos RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

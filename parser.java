
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\013\005\000\002\013\003" +
    "\000\002\014\004\000\002\014\002\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\005" +
    "\005\000\002\005\003\000\002\006\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\005\000\002\012\003\000" +
    "\002\012\005\000\002\025\005\000\002\025\003\000\002" +
    "\026\004\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\020\003\000\002\020\003\000\002\030\006\000" +
    "\002\030\010\000\002\030\010\000\002\031\005\000\002" +
    "\031\004\000\002\032\003\000\002\032\004\000\002\033" +
    "\003\000\002\033\003\000\002\036\007\000\002\036\011" +
    "\000\002\037\007\000\002\037\014\000\002\037\013\000" +
    "\002\040\004\000\002\040\005\000\002\040\004\000\002" +
    "\035\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\005\000\002\015\003\000\002\015\004\000\002\021\005" +
    "\000\002\021\005\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\016\003\000\002\016\005\000\002" +
    "\017\003\000\002\017\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\010\003\000\002\027\005" +
    "\000\002\027\006\000\002\041\005\000\002\041\003\000" +
    "\002\042\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\016\006\001\002\000\004\002\234\001" +
    "\002\000\014\002\uffff\013\016\016\017\017\015\020\012" +
    "\001\002\000\004\010\007\001\002\000\004\036\010\001" +
    "\002\000\016\013\016\016\017\017\015\020\012\034\ufffa" +
    "\037\ufffa\001\002\000\006\034\021\037\022\001\002\000" +
    "\004\032\ufff6\001\002\000\006\034\ufffc\037\ufffc\001\002" +
    "\000\004\032\020\001\002\000\004\032\ufff8\001\002\000" +
    "\004\032\ufff9\001\002\000\004\032\ufff7\001\002\000\006" +
    "\034\ufffb\037\ufffb\001\002\000\016\013\016\016\017\017" +
    "\015\020\012\034\ufffa\037\ufffa\001\002\000\004\040\023" +
    "\001\002\000\046\004\041\006\056\007\035\011\050\012" +
    "\044\013\016\014\051\015\025\016\017\017\015\020\012" +
    "\027\031\031\062\032\042\035\034\036\061\040\057\041" +
    "\ufff3\001\002\000\012\026\uffc5\034\uffcc\035\uffcc\037\uffcc" +
    "\001\002\000\004\036\212\001\002\000\004\026\206\001" +
    "\002\000\046\004\041\006\056\007\035\011\050\012\044" +
    "\013\016\014\051\015\025\016\017\017\015\020\012\027" +
    "\031\031\062\032\042\035\034\036\061\040\057\041\ufff3" +
    "\001\002\000\020\021\uffc1\022\uffc1\025\uffc1\026\uffc1\034" +
    "\uffc1\035\uffc1\037\uffc1\001\002\000\020\021\uffe1\022\uffe1" +
    "\025\uffe1\026\uffe1\034\uffe1\035\uffe1\037\uffe1\001\002\000" +
    "\020\021\uffbc\022\uffbc\025\uffbc\026\uffbc\034\uffbc\035\uffbc" +
    "\037\uffbc\001\002\000\010\034\uffca\035\uffca\037\uffca\001" +
    "\002\000\052\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\027\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\004\036\164\001\002\000" +
    "\004\032\155\001\002\000\004\035\154\001\002\000\050" +
    "\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\027\uffe9\031\uffe9" +
    "\032\uffe9\034\152\035\uffe9\036\uffe9\040\uffe9\041\uffe9\001" +
    "\002\000\004\036\144\001\002\000\026\021\uffbf\022\uffbf" +
    "\023\141\024\140\025\uffbf\026\uffbf\034\uffbf\035\uffbf\036" +
    "\110\037\uffbf\001\002\000\052\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\027\uffe7\031\uffe7\032\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\040\uffe7\041\uffe7\001\002\000\014\027" +
    "\031\031\062\032\042\035\136\036\061\001\002\000\052" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\041" +
    "\uffe3\001\002\000\004\035\134\001\002\000\004\041\133" +
    "\001\002\000\004\035\132\001\002\000\004\036\124\001" +
    "\002\000\046\004\041\006\056\007\035\011\050\012\044" +
    "\013\016\014\051\015\025\016\017\017\015\020\012\027" +
    "\031\031\062\032\042\035\034\036\061\040\057\041\ufff3" +
    "\001\002\000\016\021\120\025\117\026\uffc6\034\uffcd\035" +
    "\uffcd\037\uffcd\001\002\000\052\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\027\uffe6\031\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\041\uffe6\001\002\000\020\021" +
    "\uffc3\022\105\025\uffc3\026\uffc3\034\uffc3\035\uffc3\037\uffc3" +
    "\001\002\000\004\036\101\001\002\000\046\004\041\006" +
    "\056\007\035\011\050\012\044\013\016\014\051\015\025" +
    "\016\017\017\015\020\012\027\031\031\062\032\042\035" +
    "\034\036\061\040\057\041\076\001\002\000\052\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\027\uffe5\031\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\041\uffe5\001" +
    "\002\000\012\027\031\031\062\032\042\036\061\001\002" +
    "\000\020\021\uffe0\022\uffe0\025\uffe0\026\uffe0\034\uffe0\035" +
    "\uffe0\037\uffe0\001\002\000\020\021\uffbe\022\uffbe\025\uffbe" +
    "\026\uffbe\034\uffbe\035\uffbe\037\uffbe\001\002\000\050\004" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\027\ufff1\031\ufff1\032" +
    "\ufff1\034\066\035\ufff1\036\ufff1\040\ufff1\041\ufff1\001\002" +
    "\000\052\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\027\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\040" +
    "\uffe4\041\uffe4\001\002\000\012\013\016\016\017\017\015" +
    "\020\012\001\002\000\046\004\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\027\ufff2\031\ufff2\032\ufff2\035\ufff2\036\ufff2\040" +
    "\ufff2\041\ufff2\001\002\000\004\037\071\001\002\000\020" +
    "\021\uffbd\022\uffbd\025\uffbd\026\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\001\002\000\004\041\100\001\002\000\046\004\041" +
    "\006\056\007\035\011\050\012\044\013\016\014\051\015" +
    "\025\016\017\017\015\020\012\027\031\031\062\032\042" +
    "\035\034\036\061\040\057\041\uffda\001\002\000\046\004" +
    "\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\001\002\000\046" +
    "\004\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\001\002\000" +
    "\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\027" +
    "\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb" +
    "\041\uffdb\001\002\000\004\041\uffd9\001\002\000\052\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\027\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc" +
    "\001\002\000\012\027\031\031\062\032\042\036\061\001" +
    "\002\000\004\037\103\001\002\000\034\004\041\006\056" +
    "\007\035\011\050\012\044\014\051\015\025\027\031\031" +
    "\062\032\042\035\034\036\061\040\057\001\002\000\052" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\027\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\040\uffd4\041" +
    "\uffd4\001\002\000\012\027\031\031\062\032\106\036\061" +
    "\001\002\000\022\021\uffbf\022\uffbf\025\uffbf\026\uffbf\034" +
    "\uffbf\035\uffbf\036\110\037\uffbf\001\002\000\020\021\uffc0" +
    "\022\uffc0\025\uffc0\026\uffc0\034\uffc0\035\uffc0\037\uffc0\001" +
    "\002\000\006\032\111\037\113\001\002\000\006\034\uffec" +
    "\037\uffec\001\002\000\006\034\114\037\115\001\002\000" +
    "\020\021\uffbb\022\uffbb\025\uffbb\026\uffbb\034\uffbb\035\uffbb" +
    "\037\uffbb\001\002\000\004\032\116\001\002\000\020\021" +
    "\uffba\022\uffba\025\uffba\026\uffba\034\uffba\035\uffba\037\uffba" +
    "\001\002\000\010\034\uffeb\035\uffeb\037\uffeb\001\002\000" +
    "\012\027\031\031\062\032\106\036\061\001\002\000\012" +
    "\027\031\031\062\032\106\036\061\001\002\000\020\021" +
    "\uffc2\022\105\025\uffc2\026\uffc2\034\uffc2\035\uffc2\037\uffc2" +
    "\001\002\000\014\021\120\026\uffc4\034\uffc4\035\uffc4\037" +
    "\uffc4\001\002\000\004\041\ufff5\001\002\000\004\030\125" +
    "\001\002\000\006\034\126\037\127\001\002\000\004\032" +
    "\111\001\002\000\004\035\uffdf\001\002\000\006\034\114" +
    "\037\131\001\002\000\004\035\uffde\001\002\000\052\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\027\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1" +
    "\001\002\000\014\002\ufffe\013\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\001\002\000\052\004\uffce\005\uffce\006\uffce\007\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\027\uffce\031\uffce\032\uffce\034\uffce\035\uffce" +
    "\036\uffce\040\uffce\041\uffce\001\002\000\004\035\137\001" +
    "\002\000\052\004\uffcf\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\040\uffcf\041\uffcf\001\002\000\052\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\027\uffd0\031\uffd0\032\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\001\002\000\014" +
    "\027\031\031\062\032\042\033\142\036\061\001\002\000" +
    "\010\034\uffc9\035\uffc9\037\uffc9\001\002\000\010\034\uffc7" +
    "\035\uffc7\037\uffc7\001\002\000\010\034\uffc8\035\uffc8\037" +
    "\uffc8\001\002\000\012\027\031\031\062\032\042\036\061" +
    "\001\002\000\004\037\146\001\002\000\034\004\041\006" +
    "\056\007\035\011\050\012\044\014\051\015\025\027\031" +
    "\031\062\032\042\035\034\036\061\040\057\001\002\000" +
    "\052\004\uffd6\005\150\006\uffd6\007\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\027" +
    "\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\001\002\000\034\004\041\006\056\007\035\011" +
    "\050\012\044\014\051\015\025\027\031\031\062\032\042" +
    "\035\034\036\061\040\057\001\002\000\052\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5\001\002" +
    "\000\034\004\041\006\056\007\035\011\050\012\044\014" +
    "\051\015\025\027\031\031\062\032\042\035\034\036\061" +
    "\040\057\001\002\000\046\004\uffea\006\uffea\007\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\027\uffea\031\uffea\032\uffea\035\uffea\036\uffea\040" +
    "\uffea\041\uffea\001\002\000\052\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\027\uffe8\031\uffe8\032\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\040\uffe8\041\uffe8\001\002\000\010\024" +
    "\140\034\uffec\035\uffec\001\002\000\006\034\162\035\uffee" +
    "\001\002\000\006\034\114\035\uffef\001\002\000\004\035" +
    "\161\001\002\000\050\004\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\027\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\004\032\155\001\002\000" +
    "\004\035\uffed\001\002\000\014\013\016\016\017\017\015" +
    "\020\012\032\166\001\002\000\004\035\176\001\002\000" +
    "\004\024\140\001\002\000\012\027\031\031\062\032\042" +
    "\036\061\001\002\000\004\035\171\001\002\000\004\032" +
    "\172\001\002\000\004\023\173\001\002\000\004\037\174" +
    "\001\002\000\034\004\041\006\056\007\035\011\050\012" +
    "\044\014\051\015\025\027\031\031\062\032\042\035\034" +
    "\036\061\040\057\001\002\000\052\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\027\uffd2\031\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\001\002\000\012" +
    "\027\031\031\062\032\042\036\061\001\002\000\004\035" +
    "\200\001\002\000\004\032\201\001\002\000\004\023\202" +
    "\001\002\000\004\037\203\001\002\000\034\004\041\006" +
    "\056\007\035\011\050\012\044\014\051\015\025\027\031" +
    "\031\062\032\042\035\034\036\061\040\057\001\002\000" +
    "\052\004\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\027" +
    "\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\001\002\000\004\041\ufff4\001\002\000\012\027" +
    "\031\031\062\032\106\036\061\001\002\000\014\021\120" +
    "\025\117\034\uffc6\035\uffc6\037\uffc6\001\002\000\010\034" +
    "\uffc5\035\uffc5\037\uffc5\001\002\000\010\034\uffcb\035\uffcb" +
    "\037\uffcb\001\002\000\004\030\213\001\002\000\004\034" +
    "\214\001\002\000\004\033\215\001\002\000\004\037\216" +
    "\001\002\000\004\035\uffdd\001\002\000\006\034\ufffd\037" +
    "\ufffd\001\002\000\004\002\000\001\002\000\006\002\uffb8" +
    "\034\232\001\002\000\004\032\223\001\002\000\004\036" +
    "\224\001\002\000\016\013\016\016\017\017\015\020\012" +
    "\034\ufffa\037\ufffa\001\002\000\006\034\021\037\226\001" +
    "\002\000\004\040\227\001\002\000\046\004\041\006\056" +
    "\007\035\011\050\012\044\013\016\014\051\015\025\016" +
    "\017\017\015\020\012\027\031\031\062\032\042\035\034" +
    "\036\061\040\057\041\ufff3\001\002\000\004\041\231\001" +
    "\002\000\006\002\uffb7\034\uffb7\001\002\000\012\013\016" +
    "\016\017\017\015\020\012\001\002\000\004\002\uffb9\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\007\221\041\217\042\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\013\013\010\014" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\013" +
    "\014\216\001\001\000\002\001\001\000\054\004\046\005" +
    "\051\006\063\007\035\010\027\015\045\016\052\017\054" +
    "\020\062\021\032\023\025\024\023\025\026\026\037\027" +
    "\031\030\036\031\042\035\064\036\053\037\057\040\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\204\005\051\006\063\007\035\010\027" +
    "\015\045\016\052\017\054\020\062\021\032\023\025\024" +
    "\023\025\026\026\037\027\031\030\036\031\042\035\064" +
    "\036\053\037\057\040\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\157\012\156\021" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\027\015\134\016\052\017\054\020\062\021\032\023\025" +
    "\024\023\027\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\122\005\051\006\063\007\035\010\027\015" +
    "\045\016\052\017\054\020\062\021\032\023\025\024\023" +
    "\025\026\026\037\027\031\030\036\031\042\035\064\036" +
    "\053\037\057\040\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\005" +
    "\074\006\063\007\035\010\027\015\045\016\052\017\054" +
    "\020\062\021\032\023\025\024\023\026\073\027\031\030" +
    "\036\031\042\032\071\033\072\035\064\036\053\037\057" +
    "\040\044\001\001\000\002\001\001\000\024\010\027\015" +
    "\067\016\052\017\054\020\062\021\032\023\025\024\023" +
    "\027\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\066\006\063" +
    "\007\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\005\074\006\063" +
    "\007\035\010\027\015\045\016\052\017\054\020\062\021" +
    "\032\023\025\024\023\026\073\027\031\030\036\031\042" +
    "\032\076\033\072\035\064\036\053\037\057\040\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\027\015" +
    "\101\016\052\017\054\020\062\021\032\023\025\024\023" +
    "\027\031\001\001\000\002\001\001\000\042\010\027\015" +
    "\045\016\052\017\054\020\062\021\032\023\025\024\023" +
    "\026\103\027\031\030\036\031\042\035\064\036\053\037" +
    "\057\040\044\001\001\000\002\001\001\000\010\010\106" +
    "\020\062\027\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\027\016\121\017\054" +
    "\020\062\027\031\001\001\000\012\010\027\017\120\020" +
    "\062\027\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\010\027\015\142\016\052\017\054\020" +
    "\062\021\032\023\025\024\023\027\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\027\015\144\016\052\017\054\020\062\021\032\023\025" +
    "\024\023\027\031\001\001\000\002\001\001\000\042\010" +
    "\027\015\045\016\052\017\054\020\062\021\032\023\025" +
    "\024\023\026\146\027\031\030\036\031\042\035\064\036" +
    "\053\037\057\040\044\001\001\000\002\001\001\000\042" +
    "\010\027\015\045\016\052\017\054\020\062\021\032\023" +
    "\025\024\023\026\150\027\031\030\036\031\042\035\064" +
    "\036\053\037\057\040\044\001\001\000\002\001\001\000" +
    "\044\010\027\015\045\016\052\017\054\020\062\021\032" +
    "\023\025\024\023\025\152\026\037\027\031\030\036\031" +
    "\042\035\064\036\053\037\057\040\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\162\012\156\021\155\001\001\000\002\001" +
    "\001\000\010\006\166\007\035\021\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\027\015\167\016" +
    "\052\017\054\020\062\021\032\023\025\024\023\027\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\027\015\045\016\052" +
    "\017\054\020\062\021\032\023\025\024\023\026\174\027" +
    "\031\030\036\031\042\035\064\036\053\037\057\040\044" +
    "\001\001\000\002\001\001\000\024\010\027\015\176\016" +
    "\052\017\054\020\062\021\032\023\025\024\023\027\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\010\027\015\045\016\052" +
    "\017\054\020\062\021\032\023\025\024\023\026\203\027" +
    "\031\030\036\031\042\035\064\036\053\037\057\040\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\027\016\206\017\054\020\062\023\210\024\207\027\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\013\013\224\014\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\227\005\051" +
    "\006\063\007\035\010\027\015\045\016\052\017\054\020" +
    "\062\021\032\023\025\024\023\025\026\026\037\027\031" +
    "\030\036\031\042\035\064\036\053\037\057\040\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\221" +
    "\041\232\042\220\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpoPrograma ::= declaraciones cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpoPrograma ::= statements cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciones ::= declaracion COMMA declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVar ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionVar ::= exprAsignacion COMMA declaracionVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID ld" + l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= stmnt COMMA statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constante ::= INTEGER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Numero: " + f.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // itemBloque ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // itemBloque ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmntIteracion ::= WHILE LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmntIteracion ::= FOR LPAR exprAsignacion PUNTOCOMA expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("FOR (" + k);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmntIteracion ::= FOR LPAR declaracion expresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("BREAK;");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmntSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= condicion OPLOGIC condicion 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("OPLOGIC: " + op);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.print(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // condicion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // condicion ::= exprRelacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprRelacional ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprRelacional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprSimple ::= termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprSimple ::= exprSimple OPSUM termino 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termino ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino ::= termino OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operando ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ID operador" + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operando ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operando ::= llamadoFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // llamadoFunc ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamadoFunc ::= ID LPAR listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // subprogramas ::= subprograma COMMA subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // subprograma ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

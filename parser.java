
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\012\000\002\013\005\000\002\013\003" +
    "\000\002\014\004\000\002\014\002\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\005" +
    "\005\000\002\005\003\000\002\006\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\005\000\002\012\003\000" +
    "\002\012\005\000\002\023\005\000\002\023\003\000\002" +
    "\024\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\020\003\000\002\020\003\000\002\026\006\000" +
    "\002\026\010\000\002\026\010\000\002\027\005\000\002" +
    "\027\004\000\002\030\003\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\034\007\000\002\034\011" +
    "\000\002\035\007\000\002\035\014\000\002\035\013\000" +
    "\002\036\004\000\002\036\005\000\002\036\004\000\002" +
    "\033\004\000\002\015\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\004\000\002\021\005\000\002\021\005" +
    "\000\002\016\003\000\002\016\005\000\002\017\003\000" +
    "\002\017\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\010\003\000\002\025\005\000\002\025" +
    "\006\000\002\037\005\000\002\037\003\000\002\040\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\016\006\001\002\000\004\002\225\001" +
    "\002\000\014\002\uffff\013\016\016\017\017\015\020\012" +
    "\001\002\000\004\010\007\001\002\000\004\037\010\001" +
    "\002\000\016\013\016\016\017\017\015\020\012\035\ufffa" +
    "\040\ufffa\001\002\000\006\035\021\040\022\001\002\000" +
    "\004\033\ufff6\001\002\000\006\035\ufffc\040\ufffc\001\002" +
    "\000\004\033\020\001\002\000\004\033\ufff8\001\002\000" +
    "\004\033\ufff9\001\002\000\004\033\ufff7\001\002\000\006" +
    "\035\ufffb\040\ufffb\001\002\000\016\013\016\016\017\017" +
    "\015\020\012\035\ufffa\040\ufffa\001\002\000\004\041\023" +
    "\001\002\000\046\004\040\006\054\007\033\011\047\012" +
    "\043\013\016\014\050\015\024\016\017\017\015\020\012" +
    "\030\027\032\060\033\041\036\032\037\057\041\055\042" +
    "\ufff3\001\002\000\004\037\203\001\002\000\046\004\040" +
    "\006\054\007\033\011\047\012\043\013\016\014\050\015" +
    "\024\016\017\017\015\020\012\030\027\032\060\033\041" +
    "\036\032\037\057\041\055\042\ufff3\001\002\000\016\021" +
    "\uffc5\022\uffc5\025\uffc5\035\uffc5\036\uffc5\040\uffc5\001\002" +
    "\000\016\021\uffe1\022\uffe1\025\uffe1\035\uffe1\036\uffe1\040" +
    "\uffe1\001\002\000\016\021\uffc0\022\uffc0\025\uffc0\035\uffc0" +
    "\036\uffc0\040\uffc0\001\002\000\010\035\uffcb\036\uffcb\040" +
    "\uffcb\001\002\000\052\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\030\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\042\uffe2\001\002\000\004\037\162\001" +
    "\002\000\004\033\153\001\002\000\004\036\152\001\002" +
    "\000\050\004\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\035\150\036\uffe9\037\uffe9\041\uffe9\042" +
    "\uffe9\001\002\000\016\021\uffc7\022\107\025\uffc7\035\uffc7" +
    "\036\uffc7\040\uffc7\001\002\000\004\037\142\001\002\000" +
    "\024\021\uffc3\022\uffc3\023\137\024\136\025\uffc3\035\uffc3" +
    "\036\uffc3\037\111\040\uffc3\001\002\000\052\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\030\uffe7\032\uffe7\033" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\042\uffe7\001\002" +
    "\000\014\030\027\032\060\033\041\036\134\037\057\001" +
    "\002\000\052\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\041\uffe3\042\uffe3\001\002\000\004\036\132\001\002\000" +
    "\004\042\131\001\002\000\004\036\130\001\002\000\004" +
    "\037\122\001\002\000\046\004\040\006\054\007\033\011" +
    "\047\012\043\013\016\014\050\015\024\016\017\017\015" +
    "\020\012\030\027\032\060\033\041\036\032\037\057\041" +
    "\055\042\ufff3\001\002\000\014\021\104\025\103\035\uffcd" +
    "\036\uffcd\040\uffcd\001\002\000\052\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\030\uffe6\032\uffe6\033\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\041\uffe6\042\uffe6\001\002\000\004" +
    "\037\077\001\002\000\046\004\040\006\054\007\033\011" +
    "\047\012\043\013\016\014\050\015\024\016\017\017\015" +
    "\020\012\030\027\032\060\033\041\036\032\037\057\041" +
    "\055\042\074\001\002\000\052\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\030\uffe5\032\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\041\uffe5\042\uffe5\001\002\000\012\030" +
    "\027\032\060\033\041\037\057\001\002\000\016\021\uffe0" +
    "\022\uffe0\025\uffe0\035\uffe0\036\uffe0\040\uffe0\001\002\000" +
    "\016\021\uffc2\022\uffc2\025\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\001\002\000\050\004\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\030\ufff1\032\ufff1\033\ufff1\035\064\036\ufff1\037\ufff1\041" +
    "\ufff1\042\ufff1\001\002\000\052\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\030\uffe4\032\uffe4\033\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\041\uffe4\042\uffe4\001\002\000\012\013" +
    "\016\016\017\017\015\020\012\001\002\000\046\004\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\036\ufff2\037\ufff2\041\ufff2\042\ufff2\001\002\000\004\040" +
    "\067\001\002\000\016\021\uffc1\022\uffc1\025\uffc1\035\uffc1" +
    "\036\uffc1\040\uffc1\001\002\000\004\042\076\001\002\000" +
    "\046\004\040\006\054\007\033\011\047\012\043\013\016" +
    "\014\050\015\024\016\017\017\015\020\012\030\027\032" +
    "\060\033\041\036\032\037\057\041\055\042\uffda\001\002" +
    "\000\046\004\uffd8\006\uffd8\007\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\001" +
    "\002\000\046\004\uffd7\006\uffd7\007\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\030" +
    "\uffd7\032\uffd7\033\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7" +
    "\001\002\000\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\030\uffdb\032\uffdb\033\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\041\uffdb\042\uffdb\001\002\000\004\042\uffd9\001\002" +
    "\000\052\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\030\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\037\uffdc\041" +
    "\uffdc\042\uffdc\001\002\000\012\030\027\032\060\033\041" +
    "\037\057\001\002\000\004\040\101\001\002\000\034\004" +
    "\040\006\054\007\033\011\047\012\043\014\050\015\024" +
    "\030\027\032\060\033\041\036\032\037\057\041\055\001" +
    "\002\000\052\004\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\030\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4" +
    "\041\uffd4\042\uffd4\001\002\000\012\030\027\032\060\033" +
    "\105\037\057\001\002\000\012\030\027\032\060\033\105" +
    "\037\057\001\002\000\020\021\uffc3\022\uffc3\025\uffc3\035" +
    "\uffc3\036\uffc3\037\111\040\uffc3\001\002\000\016\021\uffc6" +
    "\022\107\025\uffc6\035\uffc6\036\uffc6\040\uffc6\001\002\000" +
    "\012\030\027\032\060\033\105\037\057\001\002\000\016" +
    "\021\uffc4\022\uffc4\025\uffc4\035\uffc4\036\uffc4\040\uffc4\001" +
    "\002\000\006\033\112\040\114\001\002\000\006\035\uffec" +
    "\040\uffec\001\002\000\006\035\115\040\116\001\002\000" +
    "\016\021\uffbf\022\uffbf\025\uffbf\035\uffbf\036\uffbf\040\uffbf" +
    "\001\002\000\004\033\117\001\002\000\016\021\uffbe\022" +
    "\uffbe\025\uffbe\035\uffbe\036\uffbe\040\uffbe\001\002\000\010" +
    "\035\uffeb\036\uffeb\040\uffeb\001\002\000\012\021\104\035" +
    "\uffcc\036\uffcc\040\uffcc\001\002\000\004\042\ufff5\001\002" +
    "\000\004\031\123\001\002\000\006\035\124\040\125\001" +
    "\002\000\004\033\112\001\002\000\004\036\uffdf\001\002" +
    "\000\006\035\115\040\127\001\002\000\004\036\uffde\001" +
    "\002\000\052\004\uffd1\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\030\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\001\002\000\014\002\ufffe\013\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\001\002\000\052\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\030\uffce\032\uffce\033\uffce" +
    "\035\uffce\036\uffce\037\uffce\041\uffce\042\uffce\001\002\000" +
    "\004\036\135\001\002\000\052\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\030\uffcf\032\uffcf\033\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\041\uffcf\042\uffcf\001\002\000\052\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\001\002\000\014\030\027\032\060\033\041\034\140\037" +
    "\057\001\002\000\010\035\uffca\036\uffca\040\uffca\001\002" +
    "\000\010\035\uffc8\036\uffc8\040\uffc8\001\002\000\010\035" +
    "\uffc9\036\uffc9\040\uffc9\001\002\000\012\030\027\032\060" +
    "\033\041\037\057\001\002\000\004\040\144\001\002\000" +
    "\034\004\040\006\054\007\033\011\047\012\043\014\050" +
    "\015\024\030\027\032\060\033\041\036\032\037\057\041" +
    "\055\001\002\000\052\004\uffd6\005\146\006\uffd6\007\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\030\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\041\uffd6\042\uffd6\001\002\000\034\004\040\006" +
    "\054\007\033\011\047\012\043\014\050\015\024\030\027" +
    "\032\060\033\041\036\032\037\057\041\055\001\002\000" +
    "\052\004\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\030" +
    "\uffd5\032\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5" +
    "\042\uffd5\001\002\000\034\004\040\006\054\007\033\011" +
    "\047\012\043\014\050\015\024\030\027\032\060\033\041" +
    "\036\032\037\057\041\055\001\002\000\046\004\uffea\006" +
    "\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\030\uffea\032\uffea\033\uffea\036" +
    "\uffea\037\uffea\041\uffea\042\uffea\001\002\000\052\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\030\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8\042\uffe8\001" +
    "\002\000\010\024\136\035\uffec\036\uffec\001\002\000\006" +
    "\035\160\036\uffee\001\002\000\006\035\115\036\uffef\001" +
    "\002\000\004\036\157\001\002\000\050\004\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\030\ufff0\032\ufff0\033\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\041\ufff0\042\ufff0\001\002\000\004\033" +
    "\153\001\002\000\004\036\uffed\001\002\000\014\013\016" +
    "\016\017\017\015\020\012\033\163\001\002\000\004\036" +
    "\173\001\002\000\012\030\027\032\060\033\041\037\057" +
    "\001\002\000\004\036\166\001\002\000\004\033\167\001" +
    "\002\000\004\023\170\001\002\000\004\040\171\001\002" +
    "\000\034\004\040\006\054\007\033\011\047\012\043\014" +
    "\050\015\024\030\027\032\060\033\041\036\032\037\057" +
    "\041\055\001\002\000\052\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\030\uffd2\032\uffd2\033\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\041\uffd2\042\uffd2\001\002\000\012\030\027" +
    "\032\060\033\041\037\057\001\002\000\004\036\175\001" +
    "\002\000\004\033\176\001\002\000\004\023\177\001\002" +
    "\000\004\040\200\001\002\000\034\004\040\006\054\007" +
    "\033\011\047\012\043\014\050\015\024\030\027\032\060" +
    "\033\041\036\032\037\057\041\055\001\002\000\052\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\030\uffd3\032" +
    "\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\001\002\000\004\042\ufff4\001\002\000\004\031\204\001" +
    "\002\000\004\035\205\001\002\000\004\034\206\001\002" +
    "\000\004\040\207\001\002\000\004\036\uffdd\001\002\000" +
    "\006\035\ufffd\040\ufffd\001\002\000\004\002\000\001\002" +
    "\000\006\002\uffbc\035\223\001\002\000\004\033\214\001" +
    "\002\000\004\037\215\001\002\000\016\013\016\016\017" +
    "\017\015\020\012\035\ufffa\040\ufffa\001\002\000\006\035" +
    "\021\040\217\001\002\000\004\041\220\001\002\000\046" +
    "\004\040\006\054\007\033\011\047\012\043\013\016\014" +
    "\050\015\024\016\017\017\015\020\012\030\027\032\060" +
    "\033\041\036\032\037\057\041\055\042\ufff3\001\002\000" +
    "\004\042\222\001\002\000\006\002\uffbb\035\uffbb\001\002" +
    "\000\012\013\016\016\017\017\015\020\012\001\002\000" +
    "\004\002\uffbd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\007\212\037\210\040\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\013\013\010\014" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\013" +
    "\014\207\001\001\000\002\001\001\000\050\004\045\005" +
    "\050\006\061\007\033\010\025\015\044\016\051\017\036" +
    "\020\060\021\030\023\024\024\035\025\027\026\034\027" +
    "\041\033\062\034\052\035\055\036\043\001\001\000\002" +
    "\001\001\000\050\004\201\005\050\006\061\007\033\010" +
    "\025\015\044\016\051\017\036\020\060\021\030\023\024" +
    "\024\035\025\027\026\034\027\041\033\062\034\052\035" +
    "\055\036\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\155\012\154\021\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\025\015\132\016\051\017\036\020\060\021\030\025" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\004" +
    "\120\005\050\006\061\007\033\010\025\015\044\016\051" +
    "\017\036\020\060\021\030\023\024\024\035\025\027\026" +
    "\034\027\041\033\062\034\052\035\055\036\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\005\072\006\061\007\033\010\025\015\044\016\051" +
    "\017\036\020\060\021\030\024\071\025\027\026\034\027" +
    "\041\030\067\031\070\033\062\034\052\035\055\036\043" +
    "\001\001\000\002\001\001\000\020\010\025\015\065\016" +
    "\051\017\036\020\060\021\030\025\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\064\006\061\007\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\005\072\006\061\007\033\010\025\015\044" +
    "\016\051\017\036\020\060\021\030\024\071\025\027\026" +
    "\034\027\041\030\074\031\070\033\062\034\052\035\055" +
    "\036\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\025\015\077\016\051\017\036\020\060\021\030\025" +
    "\027\001\001\000\002\001\001\000\036\010\025\015\044" +
    "\016\051\017\036\020\060\021\030\024\101\025\027\026" +
    "\034\027\041\033\062\034\052\035\055\036\043\001\001" +
    "\000\002\001\001\000\014\010\025\016\117\017\036\020" +
    "\060\025\027\001\001\000\012\010\025\017\105\020\060" +
    "\025\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\107\020\060\025\027\001\001\000\002\001\001" +
    "\000\004\012\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\025\015\140\016\051\017\036\020\060\021\030\025\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\025\015\142\016\051\017\036\020\060" +
    "\021\030\025\027\001\001\000\002\001\001\000\036\010" +
    "\025\015\044\016\051\017\036\020\060\021\030\024\144" +
    "\025\027\026\034\027\041\033\062\034\052\035\055\036" +
    "\043\001\001\000\002\001\001\000\036\010\025\015\044" +
    "\016\051\017\036\020\060\021\030\024\146\025\027\026" +
    "\034\027\041\033\062\034\052\035\055\036\043\001\001" +
    "\000\002\001\001\000\040\010\025\015\044\016\051\017" +
    "\036\020\060\021\030\023\150\024\035\025\027\026\034" +
    "\027\041\033\062\034\052\035\055\036\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\160\012\154\021\153\001\001\000\002" +
    "\001\001\000\006\006\163\007\033\001\001\000\002\001" +
    "\001\000\022\010\025\015\044\016\051\017\036\020\060" +
    "\021\030\025\027\033\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\010\025\015\044\016\051\017\036\020\060\021\030\024" +
    "\171\025\027\026\034\027\041\033\062\034\052\035\055" +
    "\036\043\001\001\000\002\001\001\000\022\010\025\015" +
    "\044\016\051\017\036\020\060\021\030\025\027\033\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\010\025\015\044\016\051" +
    "\017\036\020\060\021\030\024\200\025\027\026\034\027" +
    "\041\033\062\034\052\035\055\036\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\013\013\215" +
    "\014\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\004\220\005\050\006\061\007\033\010\025\015\044" +
    "\016\051\017\036\020\060\021\030\023\024\024\035\025" +
    "\027\026\034\027\041\033\062\034\052\035\055\036\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\212\037\223\040\211\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public static LinkedList<TablaError> TablaEL = new LinkedList<TablaError>();

        //Metodo para error sintactico
        public void syntax_error(Symbol s)
        {
                String lexema = s.value.toString();
                int fila = s.rigth;
                int column = s.left;

                System.out.println("Error Sintactico Recuperado");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Columna: " + columna);

                TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter No Esperado");
                System.out.println(datos);
                //TablaES.add(datos);
        }

        //Metodos para error no recuperable
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                String lexema = s.value.toString();
                int fila = s.right;
                int column = s.left;

                System.out.println("Error Sintactico, Modo Panico");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Column: " + columna);

                TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
                System.out.println(datos);
                //TablaES.add(datos);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= inicioprograma subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= inicioprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioprograma",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaParametros ::= listaParametros COMMA parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaParametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametro ::= especificadorTipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // especificadorTipo ::= VOID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // especificadorTipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // especificadorTipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // especificadorTipo ::= APUNTADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificadorTipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpoPrograma ::= declaraciones cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpoPrograma ::= statements cuerpoPrograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpoPrograma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoPrograma",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciones ::= declaracion COMMA declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion ::= especificadorTipo declaracionVar PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVar ::= listaIdentificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVar ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionVar ::= exprAsignacion COMMA declaracionVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaIdentificadores ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaIdentificadores ::= listaIdentificadores COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statements ::= stmnt COMMA statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statements ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmnt ::= stmntComandos PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmnt ::= stmntCompuesto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmnt ::= stmntSeleccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmnt ::= stmntIteracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmnt ::= stmntExpresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmnt ::= stmntSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmnt ::= PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmnt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constante ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // constante ::= CONSTCHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmntComandos ::= PRINTF LPAR CONSTSTRING RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmntComandos ::= PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmntComandos ::= SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntComandos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmntCompuesto ::= IZQLLAVE DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntCompuesto",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaBloques ::= itemBloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaBloques ::= itemBloque listaBloques 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBloques",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // itemBloque ::= stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // itemBloque ::= declaraciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("itemBloque",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmntSeleccion ::= IF LPAR expresion RPAR stmnt ELSE stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSeleccion",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmntIteracion ::= WHILE LPAR expresion RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmntIteracion ::= FOR LPAR ID PUNTOCOMA stmntExpresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmntIteracion ::= FOR LPAR declaracion stmntExpresion PUNTOCOMA ID AUTOINCREMENTOS RPAR stmnt 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntIteracion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmntSalto ::= BREAK PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmntSalto ::= RETURN expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmntSalto ::= RETURN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntSalto",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmntExpresion ::= expresion PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmntExpresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= exprSimple OPREL exprSimple 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= exprAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= ID AUTOINCREMENTOS 
            {
              Object RESULT =null;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ai = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(ai);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exprAsignacion ::= ID ASIGNACION expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprAsignacion ::= ID ASIGNACION APUNTADORVAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprAsignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprSimple ::= exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprSimple ::= exprSimple OPSUM exprMult 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSimple",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprMult ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprMult",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprMult ::= exprMult OPMULT operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprMult",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operando ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operando ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operando ::= LPAR expresion RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operando ::= llamadoFunc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamadoFunc ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // llamadoFunc ::= ID LPAR listaIdentificadores RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadoFunc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // subprogramas ::= subprograma COMMA subprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // subprogramas ::= subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogramas",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // subprograma ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograma",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

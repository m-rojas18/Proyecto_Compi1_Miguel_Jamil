import java_cup.runtime.*;

/*Palabras reservadas*/
terminal IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal INT, CHAR, APUNTADOR;
/*Lexemas*/
terminal String OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION, OPREL, AND, OR;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID,  APUNTADORVAR;
/*Caracteres especiales*/
terminal COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE, DOBLEPUNTOS, SINTERROGACION;


non terminal programa, inicioprograma, cuerpoPrograma, declaraciones, declaracion, especificadorTipo, declaracionVar, declaracionVarAsig, declaracionFunc, listaIdentificadores, listaParametros, parametro, argumentos, expresiones, expresion, exprSimple, exprAritmetica, exprMult, operando, constante,llamadaFuncion,  exprAsignacion, exprAutoSUM, exprBooleana, comandos, statements, stmt, stmtCompuesto, listaBloques, itemBloque, exprCondicional, stmtExpresion, stmtSeleccion, stmtIteracion, stmtSalto;


precedence left OR, ELSE;

start with programa;



//Programa
programa::= inicioprograma:ip {:System.out.println("Hola inicio Programa");:};
//InicioPrograma
inicioprograma ::= INT MAIN LPAR RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
                ;

//Cuerpo
cuerpoPrograma ::=  declaraciones
        |   expresiones
        |   statements
        |   comandos
        |
        ;

//ListaDeclaraciones
declaraciones::= especificadorTipo declaracionVar declaracionFunc declaracionVarAsig;
//especificador Tipo
especificadorTipo ::= VOID
                    | CHAR
                    | INT
                    | APUNTADOR
                    ;  
                    
//Declaracion de variables
declaracionVar ::= declaracionVar listaIdentificadores PUNTOCOMA
                |
                ;

//Lista Identificadores
listaIdentificadores::= listaIdentificadores COMMA ID
                        | ID
                        ;
//Declaraciones de Funciones
declaracionFunc ::= ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE;
//Lista Parametros
listaParametros ::= listaParametros COMMA parametro
                    | parametro
                    ;
//Parametro
parametro ::= especificadorTipo ID
        |       
        ;

//Lista Expresiones

expresiones ::= expresiones COMMA expresion
        |expresion;

//Expresion
expresion ::=    exprSimple
                |exprAutoSUM PUNTOCOMA
                |exprAritmetica
                |exprSimple OPREL exprSimple
                |exprBooleana
                |exprCondicional
                |exprAsignacion PUNTOCOMA
                ;

//Expresion Simple
exprSimple::=   operando
                |LPAR expresion RPAR
                ;
//Operando
operando ::= listaIdentificadores
        | constante
        | llamadaFuncion
        ;
llamadaFuncion::= ID LPAR argumentos RPAR PUNTOCOMA;

//Argumentos
argumentos ::= listaIdentificadores
        |COMMA constante
        |constante
        ;

//Constantes
constante ::= INTEGER
        | CONSTCHAR
        ;

//Expresion Aritmetica
exprAritmetica ::=  exprAritmetica OPSUM exprMult
                | exprMult 
                ;
//Expresion Multiplicacion
exprMult ::= exprMult OPMULT operando;


//Operador Asignacion
exprAsignacion ::= ID ASIGNACION expresion
                | ID ASIGNACION  APUNTADORVAR
                ;
                
//opAutoSUM
exprAutoSUM ::= ID AUTOINCREMENTOS ;

//Operador Booleano
exprBooleana ::= exprSimple AND exprSimple
                | exprSimple OR exprSimple
                ;

//Operador Condicional
exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion
                ;


//Comandos printf y scanf
comandos ::= PRINTF  LPAR CONSTSTRING RPAR
        | PRINTF LPAR CONSTSTRING COMMA operando RPAR
        | SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR
        ;


//Operador unario
/* !, &, *, +, - */


statements ::= stmt
                | statements COMMA stmt
                ;
//Statement
stmt::= stmtCompuesto
            |stmtExpresion 
            |stmtSeleccion 
            |stmtIteracion
            |stmtSalto
            ;
            
//Statement Compuesto
stmtCompuesto ::= IZQLLAVE listaBloques DERLLAVE
                    | IZQLLAVE DERLLAVE
                    ;

//Lista Bloques
listaBloques ::= itemBloque
                | listaBloques itemBloque
                ;

//Item Bloque
itemBloque ::=  declaracion
                |stmt
                ;

// Statement Expresion
stmtExpresion ::= expresion PUNTOCOMA
                |PUNTOCOMA
                ;


//Statement Seleccion
stmtSeleccion ::= IF LPAR expresion RPAR stmt
                    |  IF LPAR expresion RPAR stmt ELSE stmt
                    ;   

//Statement Iteracion
stmtIteracion ::= WHILE LPAR expresion RPAR stmt
                    | FOR LPAR expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR stmt
                    | FOR LPAR declaracion expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR stmt
                    ;
//Statement Salto
stmtSalto ::= BREAK PUNTOCOMA
                |   RETURN expresion PUNTOCOMA
                | RETURN PUNTOCOMA
                ;
                
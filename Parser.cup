//import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Symbol;


parser code 
{:
/*
        //public static LinkedList<TablaError> TablaEL = new LinkedList<TablaError>();

        //Metodo para error sintactico
        public void syntax_error(Symbol s)
        {
                String lexema = s.value.toString();
                int fila = s.rigth;
                int column = s.left;

                System.out.println("Error Sintactico Recuperado");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Columna: " + columna);

                //TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter No Esperado");
                //System.out.println(datos);
                //TablaES.add(datos);
        }

        //Metodos para error no recuperable
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                String lexema = s.value.toString();
                int fila = s.right;
                int column = s.left;

                System.out.println("Error Sintactico, Modo Panico");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Column: " + columna);

                //TablaError datos = new TablaError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
                //System.out.println(datos);
                //TablaES.add(datos);
        }
        */
        public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Columna "+(s.left+1)+" Linea "+(s.right+1) );
    }
:}


/*Palabras reservadas*/
terminal IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal INT, CHAR, APUNTADOR;
/*Lexemas*/
terminal String OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION, OPREL, OPLOGIC;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID,  APUNTADORVAR;
/*Caracteres especiales*/
terminal COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE, DOBLEPUNTOS, SINTERROGACION;


non terminal programa, inicioprograma, cuerpoPrograma, declaraciones, declaracion, especificadorTipo,operando, declaracionVar, listaIdentificadores, listaParametros, parametro,expresion, exprSimple, termino, constante, exprAsignacion, exprLogica, condicion, exprRelacional, statements, stmnt, llamadoFunc, stmntComandos, stmntCompuesto, listaBloques, itemBloque, exprCondicional, stmntExpresion, stmntSeleccion, stmntIteracion, stmntSalto, subprogramas, subprograma;


precedence left  ELSE;

start with programa;

//Programa
programa::= 
        inicioprograma subprogramas
        | inicioprograma
        | error PUNTOCOMA
        | error DERLLAVE
        | error LPAR
        | error RPAR
        ;
   

//InicioPrograma
inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
                ;
//Lista Parametros
listaParametros ::= listaParametros COMMA parametro 
                    | parametro
                    ;
//Parametro
parametro ::= especificadorTipo ID
        |/*lambda*/
        ;
//especificador Tipo
especificadorTipo ::= VOID
                    | CHAR
                    | INT
                    | APUNTADOR
                    ; 

//Cuerpo Programa
cuerpoPrograma ::=  
                declaraciones cuerpoPrograma
                | statements cuerpoPrograma
                |/*lambda*/
                ;

//ListaDeclaraciones
declaraciones ::=
                declaracion COMMA declaraciones
                | declaracion
                ;
//Declaracion
declaracion ::= especificadorTipo declaracionVar PUNTOCOMA;
//Declaracion Var
declaracionVar ::=  listaIdentificadores        
                | exprAsignacion              
                | exprAsignacion COMMA declaracionVar
                ;

//Lista Identificadores
listaIdentificadores::= ID:l      {:System.out.println("ID ld" + l);:}                
                        |listaIdentificadores COMMA ID
                ;
//Lista statements
statements ::=  stmnt COMMA statements
                |stmnt        
                ;

//Statements
stmnt::= 
        stmntComandos PUNTOCOMA
        |stmntCompuesto
        |stmntSeleccion
        |stmntIteracion
        |stmntExpresion 
        |stmntSalto
        |PUNTOCOMA
        | error PUNTOCOMA 
        ;


//Constante
constante ::=  INTEGER:f          {:System.out.println("Numero: " + f.toString());:}
                | CONSTCHAR;

//Comandos printf y scanf
stmntComandos::= PRINTF  LPAR CONSTSTRING RPAR
        | PRINTF LPAR CONSTSTRING COMMA listaIdentificadores RPAR 
        | SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
        ;

//Statement Compuesto
stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE
                    | IZQLLAVE DERLLAVE
                    ;

//Lista Bloques
listaBloques ::= itemBloque
                | itemBloque listaBloques
                ;

//Item Bloque
itemBloque ::= stmnt
                |declaraciones
                ;

//Statement Seleccion
stmntSeleccion ::= IF LPAR expresion RPAR stmnt 
                    |  IF LPAR expresion RPAR stmnt ELSE stmnt 
                    ;   

//Statement Iteracion
stmntIteracion ::= WHILE LPAR expresion RPAR stmnt
                    | FOR LPAR exprAsignacion PUNTOCOMA expresion PUNTOCOMA ID:k AUTOINCREMENTOS RPAR stmnt {:System.out.println("FOR (" + k);:}
                    | FOR LPAR declaracion expresion PUNTOCOMA  ID AUTOINCREMENTOS RPAR stmnt
                    ;

//Statement Salto
stmntSalto ::= 
                BREAK PUNTOCOMA {:System.out.println("BREAK;");:}
                |RETURN expresion PUNTOCOMA 
                |RETURN PUNTOCOMA
                ;

// Statement Expresion
stmntExpresion ::=  expresion PUNTOCOMA;

/*Consultar AND y OR*/
//Expresion
expresion ::= 
                exprSimple
                | exprRelacional
                | condicion OPLOGIC:op condicion {:System.out.println("OPLOGIC: " + op);:}
                | exprAsignacion
                | ID AUTOINCREMENTOS
                ;


//ExpresionAsignacion
exprAsignacion ::= ID:i ASIGNACION expresion       {:System.out.print(i);:}
                | ID ASIGNACION  APUNTADORVAR
           ;

condicion ::= exprSimple 
                | exprRelacional
                ;

//Expresion Relacional
exprRelacional::= exprSimple OPREL exprSimple;
//exprSimple
exprSimple ::= termino
        | exprSimple OPSUM termino
        ;
termino ::= operando
                | termino OPMULT operando
                ;
//Operando
operando ::= ID:a                  {:System.out.println("ID operador" + a);:}
        | constante
        | LPAR expresion RPAR
        |llamadoFunc
        ;
//Statement Funcion
llamadoFunc ::= ID LPAR RPAR
                |ID LPAR  listaIdentificadores RPAR 
                ;
/*
//Operador Condicional/*
//exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion
  //              ;
*/
//Lista Subprogramas
subprogramas::= subprograma COMMA subprogramas
                | subprograma
                ;

//subprograma
subprograma::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE;
//Operador unario
/* !, &, *, +, - */
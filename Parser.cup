import java_cup.runtime.*;

/*
parser code 
{:
        public static LinkedList<TError> TablaEL = new LinkedList<TError>();

        //Metodo para error sintactico
        public void syntax_error(Symbol s)
        {
                String lexema = s.value.toString();
                int fila = s.rigth;
                int column = s.left;

                System.out.println("Error Sintactico Recuperado");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Columna: " + columna);

                TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter No Esperado");
                TablaES.add(datos);
        }

        //Metodos para error no recuperable
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
                String lexema = s.value.toString();
                int fila = s.right;
                int column = s.left;

                System.out.println("Error Sintactico, Modo Panico");
                System.out.println("Lexema: " + lexema);
                System.out.println("Fila: " + fila);
                System.out.println("Column: " + columna);

                TError datos = new TError(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
                TablaES.add(datos);
        }
:}

*/

/*Palabras reservadas*/
terminal IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal INT, CHAR, APUNTADOR;
/*Lexemas*/
terminal String OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION, OPREL, AND, OR;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID,  APUNTADORVAR;
/*Caracteres especiales*/
terminal COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE, DOBLEPUNTOS, SINTERROGACION;


non terminal programa, inicioprograma, cuerpoPrograma, declaraciones, declaracion, especificadorTipo, declaracionVar, listaIdentificadores, listaParametros, parametro,expresion, exprSimple, exprAritmetica, exprMult, constante, exprAsignacion, exprAutoSUM, exprBooleana, statements, stmnt, stmntFunc, stmntComandos, listaArgumentos, argumento, stmntCompuesto, listaBloques, itemBloque, exprCondicional, stmntExpresion, stmntSeleccion, stmntIteracion, stmntSalto, subprogramas, subprograma;


precedence left OR, ELSE;

start with programa;

//Programa
programa::= 
        inicioprograma subprogramas
        | inicioprograma
        ;


//InicioPrograma
inicioprograma ::= INT MAIN LPAR listaParametros RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
                ;
//Lista Parametros
listaParametros ::= listaParametros COMMA parametro 
                    | parametro
                    ;
//Parametro
parametro ::= especificadorTipo ID
        |/*lambda*/
        ;
//especificador Tipo
especificadorTipo ::= VOID
                    | CHAR
                    | INT
                    | APUNTADOR
                    ; 

//Cuerpo Programa
cuerpoPrograma ::=  declaraciones statements cuerpoPrograma
                | declaraciones 
                | statements
                |/*lambda*/
                ;

//ListaDeclaraciones
declaraciones ::=
                declaracion COMMA declaraciones
                | declaracion
                ;
//Declaracion
declaracion ::= 
                especificadorTipo declaracionVar PUNTOCOMA 
                ;
//Declaracion Var
declaracionVar ::=  listaIdentificadores        
                | ID ASIGNACION INTEGER              
                | ID ASIGNACION INTEGER COMMA declaracionVar
                ;

//Lista Identificadores
listaIdentificadores::= ID COMMA listaIdentificadores
                | ID
                ;
//Lista statements
statements ::= 
                stmnt COMMA statements
                |stmnt        
                ;

//Statements
stmnt::= 
        stmntFunc
        |stmntComandos PUNTOCOMA
        |stmntCompuesto
        |stmntSeleccion
        |stmntIteracion
        |stmntExpresion 
        |stmntSalto
        |PUNTOCOMA
        ;

//Statement Funcion
stmntFunc ::= ID:a LPAR listaArgumentos RPAR PUNTOCOMA {:System.out.println(a);:}
                |ID LPAR RPAR PUNTOCOMA 
                ;

//Lista Argumentos
listaArgumentos::= argumento COMMA listaArgumentos
                |argumento
                ;
//Argumento, poner expresion
argumento ::= 
                constante
                |ID
                | APUNTADORVAR
                ;
//Constante
constante ::=  INTEGER
                | CONSTCHAR;

//Comandos printf y scanf
stmntComandos::= PRINTF  LPAR CONSTSTRING RPAR
        | PRINTF LPAR CONSTSTRING COMMA argumento RPAR 
        | SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR 
        ;

//Statement Compuesto
stmntCompuesto ::= IZQLLAVE listaBloques DERLLAVE
                    | IZQLLAVE DERLLAVE
                    ;

//Lista Bloques
listaBloques ::= itemBloque
                | itemBloque listaBloques
                ;

//Item Bloque
itemBloque ::= stmnt
                |declaraciones
                ;

// Statement Expresion
stmntExpresion ::= expresion PUNTOCOMA;

//Statement Seleccion
stmntSeleccion ::= IF LPAR INTEGER RPAR stmnt 
                    |  IF LPAR INTEGER:a RPAR stmnt ELSE stmnt {:System.out.println(a);:}
                    ;   

//Statement Iteracion
stmntIteracion ::= WHILE LPAR INTEGER RPAR stmnt
                    | FOR LPAR INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt
                    | FOR LPAR declaracion INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt
                    | FOR LPAR ID INTEGER PUNTOCOMA INTEGER PUNTOCOMA INTEGER RPAR stmnt
                    ;

//Statement Salto
stmntSalto ::= 
                BREAK PUNTOCOMA
                |RETURN INTEGER:a PUNTOCOMA {:System.out.println(a);:}
                |RETURN PUNTOCOMA
                ;


//exprSimple
exprSimple ::= ID
        |constante
        | LPAR expresion RPAR
        ;

//Expresion
expresion ::=    exprSimple
                |exprAutoSUM PUNTOCOMA
                |exprAritmetica
                |exprSimple OPREL exprSimple
                |exprBooleana
                |exprCondicional
                |exprAsignacion 
                ;

//Expresion Aritmetica
exprAritmetica ::=  exprAritmetica OPSUM exprMult
                | exprMult 
                ;
//Expresion Multiplicacion
exprMult ::= exprMult OPMULT exprSimple;

//Operador Asignacion
exprAsignacion ::= ID ASIGNACION expresion
                | ID ASIGNACION  APUNTADORVAR
                ;
                
//opAutoSUM
exprAutoSUM ::= ID AUTOINCREMENTOS ;

//Operador Booleano
exprBooleana ::= exprSimple AND exprSimple
                | exprSimple OR exprSimple
                ;

//Operador Condicional
exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion
                ;
//Lista Subprogramas
subprogramas::= subprograma COMMA subprogramas
                | subprograma
                ;

//subprograma
subprograma::= especificadorTipo ID LPAR listaArgumentos RPAR IZQLLAVE cuerpoPrograma DERLLAVE;
//Operador unario
/* !, &, *, +, - */
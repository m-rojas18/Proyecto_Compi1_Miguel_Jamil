import java_cup.runtime.*;


terminal String IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal String INT, CHAR, APUNTADOR, APUNTADORVAR;
terminal OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION;
terminal OPREL, OPBOOL;
terminal String COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE, DOBLEPUNTOS, INTERROGACION;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID;

non terminal programa, inicioprograma; cuerpo, listaDeclaraciones, subprogramas;

start with programa;
/*

int main (){

}
*/
//Programa
programa::= inicioprograma;
//InicioPrograma
inicioprograma ::= INT MAIN LPAR RPAR IZQLLAVE DERLLAVE ;


//Cuerpo
cuerpo ::=  listaDeclaraciones
        |   listaStatements
        |   listaExpresiones
        ;

;
//ListaDeclaraciones
listaDeclaraciones::= declaracion 
                    | listaDeclaraciones declaracion
                    ;
//Declaracion
declaracion::= declaracionFunc
            | declaracionVar
            ;
//declaracion Funcion
declaracionFunc ::= especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE Cuerpo DERLLAVE
                ;
//Lista parametros
listaParametros ::= listaParametros , parametro
                    | parametro
                    ;
//Parametro
parametro ::=especificadorTipo ID;

//Declaracion Variable
declaracionVar::= especificadorTipo ID PUNTOCOMA
                | especificadorTipo ID listaIdentificadores PUNTOCOMA
                | especificadorTipo ID ASIGNACION expresion PUNTOCOMA
                ;
//especificador Tipo
especificadorTipo ::= VOID
                    | CHAR
                    | INT
                    | APUNTADOR 
                    ;   

//ListaIdentificadores
listaIdentificadores::= listaIdentificadores ID
                    | ID
                    ;


//Expresion
expresion ::= opAsignacion
            | opAutomSUM
            | opCondicional
            | expresionSimple
            ;
//Operador Asignacion
opAsignacion ::= ID ASIGNACION expresionSimple PUNTOCOMA
                | ID ASIGNACION operando PUNTOCOMA
                ;
//opAutoSUM
opAutomSUM ::= variable AUTOINCREMENTOS PUNTOCOMA


expresionSimple::=  opAritmetico
            |opComparacion
            |opLogico
            |
            ;


//Operador Aritmetico, empieza en Suma
opAritmetico ::=  opAritmetico OPSUM expMult
                | expMult 
                ;
//Expresion Multiplicacion
expMult ::= expMult OPMULT valorNUM
        | valorNUM
        ;
//Valor en expresion aritmetico
valorNUM ::= INTEGER
        | LPAR opAritmetico RPAR
        ;

//Operador Comparacion


opComparacion ::= operador OPREL operador
                | LPAR operador OPREL operador RPAR
                ;
opLogico ::= operador OPBOOL operador
                | LPAR operador OPBOOL operador RPAR
                ;

operando ::= variable
        | constantes
        | llamadaFuncion
        ;

listaStatements::= statement
                | listaStatements, statement
                ;
//Statement
statement::= statementCompuesto
            |statementExpresion
            |statementSeleccion
            |statementIteracion
            |statementSalto
            ;
//Statement Compuesto
statementCompuesto ::= IZQLLAVE listaBloques DERLLAVE
                    | IZQLLAVE DERLLAVE
                    ;

//Lista Bloques
listaBloques :== itemBloque
                | listaBloques itemBloque

//Item Bloque
itemBloque :==  declaracion
                |statement
                ;

// Statement Expresion
statementExpresion :== expresion PUNTOCOMA
                    |PUNTOCOMA
                    ;

//Statement Seleccion
statementSeleccion :== IF LPAR expresion RPAR statement
                    | IF LPAR expresion RPAR statement ELSE statement
                    ;

//Statement Iteracion
statementIteracion :== WHILE LPAR expresion RPAR statement
                    | FOR LPAR expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement
                    | FOR LPAR declaracion expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement
                    ;
//Statement Salto
statementSalto :== BREAK PUNTOCOMA
                |   RETURN expresion PUNTOCOMA
                | return PUNTOCOMA
                ;
                    
//Subprogramas
subprogramas ::= especificadorTipo


;
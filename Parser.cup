import java_cup.runtime.*;

/*Palabras reservadas*/
terminal IF, ELSE, WHILE, FOR, MAIN, BREAK, RETURN, VOID, PRINTF, SCANF;
terminal INT, CHAR, APUNTADOR;
/*Lexemas*/
terminal String OPSUM, OPMULT, AUTOINCREMENTOS, ASIGNACION, OPREL, AND, OR;
terminal String INTEGER, CONSTSTRING, CONSTCHAR, ID,  APUNTADORVAR;
/*Caracteres especiales*/
terminal COMMA, PUNTOCOMA, LPAR, RPAR, IZQLLAVE, DERLLAVE, DOBLEPUNTOS, SINTERROGACION;


non terminal programa, inicioprograma, cuerpoPrograma, listaDeclaraciones, declarador, declaracion, iniciarDecl,listaParametros, parametro, especificadorTipo, listaIdentificadores, listaExpresiones, expresion, exprSimple, exprAritmetica, exprMult, operando, constante, exprAsignacion, exprAutoSUM, exprBooleana, llamadaFuncion, comandos, listaStatements, statement, statementCompuesto, listaBloques, itemBloque, exprCondicional, statementExpresion, statementSeleccion, statementIteracion, statementSalto, initDeclaratorLista ;


precedence left OR, ELSE;

start with programa;



//Programa
programa::= inicioprograma:ip {:System.out.println("Hola inicio Programa");:};
//InicioPrograma
inicioprograma ::= INT MAIN LPAR RPAR IZQLLAVE cuerpoPrograma DERLLAVE 
;
/*Cambiar subprogramas*/

//Cuerpo
cuerpoPrograma ::=  listaDeclaraciones
        |   listaStatements
        |   listaExpresiones
        |
        ;
//ListaDeclaraciones
/*Probar si funcion tira error*/
listaDeclaraciones::= listaDeclaraciones COMMA declaracion
                        |declaracion 
                    ;
//Declaracion
declaracion::= especificadorTipo initDeclaratorLista PUNTOCOMA
                | especificadorTipo ID LPAR listaParametros RPAR IZQLLAVE DERLLAVE
                ;

//InicialiarDeclaracion
initDeclaratorLista ::= declarador
                        | initDeclaratorLista COMMA declarador
                        ;

//Lista Identificadores
listaIdentificadores::= listaIdentificadores COMMA ID
                        | ID
                        ;
declarador ::= listaIdentificadores
                |exprAsignacion
                ;

//Lista parametros
listaParametros ::= listaParametros COMMA parametro
                    | parametro
                    ;
//Parametro
parametro ::= especificadorTipo ID
        |       
        ;

//Declaracion Variable
/*
declaracionVar::= especificadorTipo ID listaIdentificadores 
                ;*/

                //a 
                //a , b
                //a = 3
//especificador Tipo
especificadorTipo ::= VOID
                    | CHAR
                    | INT
                    | APUNTADOR 
                    ;   


//Inicializar declarador
iniciarDecl ::=   ID 
                | ID ASIGNACION expresion
                ;

//Lista Expresiones
listaExpresiones ::= expresion PUNTOCOMA
                | listaExpresiones COMMA expresion PUNTOCOMA
                ;

//Expresion
expresion ::=    exprSimple
                |exprAutoSUM
                |exprAritmetica
                |exprSimple OPREL exprSimple
                |exprBooleana
                |exprCondicional
                |exprAsignacion 
                ;

//Expresion Simple
exprSimple::=   operando
                |llamadaFuncion
                |LPAR expresion RPAR
                ;

//Expresion Aritmetica
exprAritmetica ::=  exprAritmetica OPSUM exprMult
                | exprMult 
                ;


//Operando
operando ::= ID
        | constante
        ;
//Expresion Multiplicacion
exprMult ::= exprMult OPMULT operando
        ;
//Constantes
constante ::= INTEGER
        | CONSTCHAR
        ;

//ID;

//Operador Asignacion
exprAsignacion ::= ID ASIGNACION expresion
                | ID ASIGNACION  APUNTADORVAR
                ;
//opAutoSUM
exprAutoSUM ::= ID AUTOINCREMENTOS ;

//Operador Booleano
exprBooleana ::= exprSimple AND exprSimple
                | exprSimple OR exprSimple
                ;

//Operador Condicional
exprCondicional ::= LPAR expresion RPAR SINTERROGACION expresion DOBLEPUNTOS expresion
                ;

//Llamada funcion
llamadaFuncion ::= ID LPAR listaParametros RPAR
                | comandos 
                ;
//Comandos printf y scanf
comandos ::= PRINTF  LPAR CONSTSTRING RPAR
        | PRINTF LPAR CONSTSTRING COMMA operando RPAR
        | SCANF LPAR CONSTSTRING COMMA APUNTADORVAR RPAR
        ;


//Operador unario
/* !, &, *, +, - */


listaStatements::= statement
                | listaStatements COMMA statement
                ;
//Statement
statement::= statementCompuesto
            |statementExpresion
            |statementSeleccion
            |statementIteracion
            |statementSalto
            ;
//Statement Compuesto
statementCompuesto ::= IZQLLAVE listaBloques DERLLAVE
                    | IZQLLAVE DERLLAVE
                    ;

//Lista Bloques
listaBloques ::= itemBloque
                | listaBloques itemBloque
                ;

//Item Bloque
itemBloque ::=  declaracion
                |statement
                ;

// Statement Expresion
/*statementExpresion ::= expresion PUNTOCOMA
                    |PUNTOCOMA
                    ;*/

//Statement Seleccion
statementSeleccion ::= IF LPAR expresion RPAR statement 
                    |  IF LPAR expresion RPAR statement ELSE statement
                    ;   

//Statement Iteracion
statementIteracion ::= WHILE LPAR expresion RPAR statement
                    | FOR LPAR expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement
                    | FOR LPAR declaracion expresion PUNTOCOMA expresion PUNTOCOMA expresion RPAR statement
                    ;
//Statement Salto
statementSalto ::= BREAK PUNTOCOMA
                |   RETURN expresion PUNTOCOMA
                | RETURN PUNTOCOMA
                ;
                    